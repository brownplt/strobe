// NOTE: This file should _only_ contain class definitions. The fields of
// HTMLWindow (the global object's type) are automatically added to the
// initial environment.

// Basic primitive types assumed by the type checker. Omitting these will cause
// bad errors.
primitive @Null
primitive @Undef
primitive @True
primitive @False
primitive @Num

// The type of comparisons may seem unnecessarily restrictive. However, these
// types ensure that .toStr() and .valueOf() are not called.
operator "<" : Any * Any -> Bool
operator "<=" : Any * Any -> Bool
operator ">" : Any * Any -> Bool
operator ">=" : Any * Any -> Bool
operator "==" : Any * Any -> Bool
operator "!=" : Any * Any -> Bool

// TODO: verify these are safe, like other comparisons
operator "&&" : forall a . forall b . 'a * 'b -> Bool + 'b
operator "||" : forall a . forall b . 'a * 'b -> 'a + 'b

operator "instanceof" : forall a . forall b . 'a * 'b -> Bool

// int args, num result
operator "*" : Any * Any -> Num
operator "/" : Any * Any -> Num
operator "%" : Any * Any -> Num // might restrict to Num
operator "-" : Any * Any -> Num
operator "<<" : Any * Any -> Num
operator ">>" : Any * Any -> Num
operator ">>>" : Any * Any -> Num
operator "&" : Any * Any -> Num
operator "^" : Any * Any -> Num
operator "|" : Any * Any -> Num
operator "+" : (Num * Num -> Num) & (Any * Any -> Str)
operator "in" : forall a <: #{ __proto__: Any } . Str * 'a -> Bool

operator "===" : Any * Any -> Bool
operator "!==" : Any * Any -> Bool

operator "charAt" : Any * Any -> Str

operator "prefix:!" : (True -> False) & (False -> True) & (Any -> Bool)
operator "prefix:~" : Any -> Num
operator "prefix:+" : Any -> Num
operator "prefix:-" :  Any -> Num
operator "prefix:typeof" :  Any -> Str
operator "prefix:void" : Any -> Undef

operator "%ToObject"  : forall a . 'a -> 'a // Any -> ObjectP
operator "%ToString"  :
    (Num -> /(([0-9])*|("+Infinity"|("-Infinity"|"NaN")))/)
  & (forall a <: Str . 'a -> 'a)
operator "%ToBoolean" : (True -> True) & (False -> False) & (Any -> Bool)

type Object  = {
  * : _,
  __proto__: Null,
}

Object : Object

////////////////////////////////////////

primitive @Unsafe
type Ext =
  rec ext .
    Num + Bool + Undef + Str + Null +
    {
      __proto__: Object,
      prototype :? 'ext,
      "-*- code -*-" : Undef + ([this('ext)] 'ext ... => 'ext),
      defaultView : _,
      * : 'ext,
    }
type AnObject = { __proto__ : Object, * : Ext }
////////////////////////////////////////

type Outparam = typlambda t :: * . {
      value : 't,
      __proto__: Object,
      "-*- code -*-" : Undef,
      * : _,
}

type Array =
  typrec  array :: * => * .
    typlambda a :: * . {
      /(([0-9])*|("+Infinity"|("-Infinity"|"NaN")))/ :! 'a,
      length : Num,
      "-*- code -*-" : Undef + ( ([Ext] Ext ... => Ext)),
      prototype :? Ext,
      concat:^ ['array<'a>] Any -> 'array<'a>,
      splice:^ ['array<'a>] Num * Num * 'a ... -> 'array<'a>,
      join:^ ['array<'a>] (Str + Undef) -> Str,
      sort:^ ['array<'a>] -> 'array<'a>,
      * : Ext,
      __proto__: {
        __proto__: Object,
        * : _,
        // Note how the type of "this" is array<'a>. If these are applied
        // as methods, arr.map(...), then the inner 'a and outer 'a will
        // be the same.
        // map: forall a . forall b . ['array<'a>] ('a -> 'b) -> 'array<'b>,
        // slice: forall a . ['array<'a>] Num * Num + Undef -> 'array<'a>,
        concat: forall a . ['array<'a>] 'array<'a> -> 'array<'a>,
        // forEach: forall a . ['array<'a>] ('a -> Any) -> Undef,
        // filter: forall a . ['array<'a>] ('a -> Bool) -> 'array<'a>,
        // every: forall a . ['array<'a>] ('a -> Bool) -> Bool,
        // some: forall a . ['array<'a>] ('a -> Bool) -> Bool,
        // reduce: forall a . ['array<'a>] ('a * 'a -> 'a) -> 'a,
        // reduceRight: forall a . ['array<'a>] ('a * 'a -> 'a) -> 'a,
        // push: forall a . ['array<'a>] 'a -> Undef,
        // pop: forall a . ['array<'a>] -> 'a,
        // shift: forall a . ['array<'a>] -> 'a,
        // unshift: forall a .['array<'a>] -> 'a,
        // reverse: forall a . ['array<'a>] -> 'array<'a>,
        // sort: forall a . ['array<'a>] ('a -> Num) + Undef-> 'array<'a>,
        join: forall a . ['array<'a>] (Str + Undef) -> Str,
        // toString: forall a . ['array<'a>] -> Str
      }
  }

type RegExp = {Ext with
  match : [this('ext)] Str -> Array<Str>,
  test : [this('ext)] Str -> Bool,
  exec : [this('ext)] Str -> Str + Null
}

RegExp : Str * (Str + Undef) -> RegExp

type String = {Any -> Str with
  replace : RegExp * Ext -> Str,
  match : RegExp -> Array<Str>,
  split : (Str + RegExp) -> Array<Str>,
  slice : Num * (Num + Undef) -> Str,
  search : RegExp -> Num,
  concat : (Str + Array<Str>) -> Str,
  charCodeAt : Num -> Num,
  lastIndexOf : Str * (Num + Undef) -> Num,
  substring : Num * (Num + Undef) -> Str,
  substr : Num * Num -> Str, //yes there is 2 of them
  length : Num,
  charAt : Num -> Str,
  toLowerCase : -> Str,
  indexOf : Str -> Num,
}

type Number = {[Any] Any -> Num with
  toString : (Undef + Num) -> Str,
  * : _
}

Number : Any -> Num

Str_fromCharCode : Num -> Str

type Bool = {
  __proto__: Object
}

type Date = {
  __proto__: Object,
  getDate : -> Num,
  getDay : -> Num,
  getFullYear : -> Num,
  getHours : -> Num,
  getMilliseconds : -> Num,
  getMinutes : -> Num,
  getMonth : -> Num,
  getSeconds : -> Num,
  getTime : -> Num,
  getTimezoneOffset : -> Num,
  getUTCDate : -> Num,
  getUTCDay : -> Num,
  getUTCFullYear : -> Num,
  getUTCHours : -> Num,
  getUTCMilliseconds : -> Num,
  getUTCMinutes : -> Num,
  getUTCMonth : -> Num,
  getUTCSeconds : -> Num,
  getYear : -> Num,

  parse : Str -> Num,

  setDate : Num -> Num,
  setFullYear : Num * Num + Undef * Num + Undef -> Num,
  setHours : Num * Num + Undef * Num + Undef * Num + Undef -> Num,
  setMilliseconds : Num -> Num,
  setMinutes : Num * Num + Undef * Num + Undef -> Num,
  setMonth : Num * Num + Undef -> Num,
  setSeconds : Num * Num + Undef -> Num,
  setTime : Num -> Num,
  setUTCDate : Num -> Num,
  setUTCFullYear : Num * Num + Undef * Num + Undef -> Num,
  setUTCHours : Num * Num + Undef * Num + Undef * Num + Undef -> Num,
  setUTCMilliseconds : Num -> Num,
  setUTCMinutes : Num * Num + Undef * Num + Undef -> Num,
  setUTCMonth : Num * Num + Undef -> Num,
  setUTCSeconds : Num * Num + Undef -> Num,
  setYear : Num -> Num,

  toDateStr : -> Str,
  toGMTStr : -> Str,
  toLocaleDateStr : -> Str,
  toLocaleStr : -> Str,
  toLocaleTimeStr : -> Str,
  toStr : -> Str,
  toTimeStr : -> Str,
  toUTCStr : -> Str,

  valueOf : -> Num,
}

////////////////////////////////////////

Array : (forall a . [Any] 'a * 'a ... -> Array<'a>)

String : {[Any] Any -> String with
   fromCharCode : Any -> Str,
}

Date : rec d . {([Date] (Num + Str + Undef) * (Num + Undef) ... -> Date) &
        ([Any] (Num + Str + Undef) * (Num + Undef) ... -> Str)  with
   now : [this('d)] -> Num,
}

type JSON = rec j . {
     __proto__ : Object,
     fromString : [this('j)] Ext -> Array<Ext>,
     parse :  [this('j)] Ext -> Array<Ext>,
     toString : [this('j)] Any -> Str,
     stringify :  [this('j)] Any -> Str,
}

////////////////////////////////////////

type JSGlobal = {
  __proto__: Object,
  encodeURI : Str -> Str,
  parseNum : Any * Num + Undef -> Num,
  parseFloat : Any -> Num,
  undefined: Undef,
  JSON: JSON,
  Math: {
    __proto__: Object,
    E : Num,
    LN10 : Num,
    LN2 : Num,
    LOG2E : Num,
    LOG10E : Num,
    PI : Num,
    SQRT1_2 : Num,
    SQRT2 : Num,
    abs : forall a <: Num . 'a -> 'a,
    acos : Num -> Num,
    asin : Num -> Num,
    atan : Num -> Num,
    atan2 : Num -> Num,
    ceil : Num -> Num,
    cos : Num -> Num,
    exp : Num -> Num,
    floor : Num -> Num,
    log : Num -> Num,
    max : forall a <: Num . 'a * 'a -> 'a,
    min : forall a <: Num . 'a * 'a -> 'a,
     // See page 128 of ECMA262-3 .pdf. What is going on with Math.pow?!
    pow : forall a <: Num . 'a * 'a -> 'a,
    random : -> Num,
    // round(NaN) === NaN ...
    round : Num -> Num,
    sin : Num -> Num,
    sqrt : Num -> Num,
    tan : Num -> Num
  },
  ////////////////////////////////////////
  parseInt : Any * Any -> Num,
  btoa : Any -> Str,
  atob : Any -> Str,
  dump : Str -> Undef
  ////////////////////////////////////////
}

type Window = rec w . {JSGlobal with
     __proto__ : Object,
     arguments : Array<Ext>,
     window : 'w,
     content : 'w,
     pageXOffset : Num,
     pageYOffset : Num,
     document : Ext,
     getElementById : Str -> Ext,
     goDoCommand : [this('w)] Str -> Undef,
     addEventListener :    [this('w)] Str * (([this('w)]      -> Undef) +
                                             ([this('w)] Ext -> Undef)) * Bool -> Undef,
     removeEventListener : [this('w)] Str * (([this('w)]      -> Undef) +
                                             ([this('w)] Ext -> Undef)) * Bool -> Undef,
     getBrowser : [this('w)] -> Ext,
     getComputedStyle : [this('w)] Any * Ext -> Ext,
     setTimeout : (           [this('w)] ([this('w)]    -> Undef) * Num      -> Ext) &
                  (forall a . [this('w)] ([this('w)] 'a -> Undef) * Num * 'a -> Ext),
     setInterval :  [this('w)] ([this('w)] -> Undef) * Num -> Undef,
     open : [this('w)] Ext * Ext * Ext -> 'w,
     close : [this('w)] -> Undef,
     clearTimeout : Any -> Undef,
     openDialog : Ext,
     BrowserCloseTabOrWindow : [Any] -> Undef,
     XPathResult : Ext,
     frames : Array<Ext>,
     getSelection : -> Ext,
     localStorage : _,
}

type Global = Window

%global : Window
