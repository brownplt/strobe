// NOTE: This file should _only_ contain class definitions. The fields of
// HTMLWindow (the global object's type) are automatically added to the
// initial environment.

// Basic primitive types assumed by the type checker. Omitting these will cause
// bad errors.
primitive @Null
primitive @Undef
primitive @True
primitive @False
primitive @Num

// The type of comparisons may seem unnecessarily restrictive. However, these
// types ensure that .toStr() and .valueOf() are not called.
operator "<" : forall a <: Num + Str . 'a * 'a -> Bool
operator "<=" : forall a <: Num + Str . 'a * 'a -> Bool
operator ">" : forall a <: Num + Str . 'a * 'a -> Bool
operator ">=" : forall a <: Num + Str . 'a * 'a -> Bool
operator "==" : forall a . 'a * 'a -> Bool
operator "!=" : forall a . 'a * 'a -> Bool

// TODO: verify these are safe, like other comparisons
operator "&&" : forall a . forall b . 'a * 'b -> Bool + 'b
operator "||" : forall a . forall b . 'a * 'b -> 'a + 'b

// int args, num result
operator "*" : forall a <: Num . 'a * 'a -> 'a
operator "/" : Num * Num -> Num
operator "%" : forall a <: Num . 'a * 'a -> 'a // might restrict to Num
operator "-" : forall a <: Num . 'a * 'a -> 'a
operator "<<" : Num * Num -> Num
operator ">>" : Num * Num -> Num
operator ">>>" : Num * Num -> Num
operator "&" : Num * Num -> Num
operator "^" : Num * Num -> Num
operator "|" : Num * Num -> Num
operator "+" : (Num * Num -> Num) & (Str * Num -> Str) & (Num * Str -> Str) & (Str * Str -> Str)
operator "in" : forall a <: { __proto__: Any } . Str * 'a -> Bool

operator "===" : forall a . 'a * 'a -> Bool
operator "!==" : forall a . 'a * 'a -> Bool

operator "charAt" : Str * Num -> Str

operator "prefix:!" : (True -> False) & (False -> True) & (Any -> Bool)
operator "prefix:~" : Num -> Num
operator "prefix:+" : forall a <: Num . 'a -> 'a
operator "prefix:-" : forall a <: Num . 'a -> 'a
operator "prefix:typeof" : forall a . 'a -> Str
operator "prefix:void" : forall a . 'a -> Undef

operator "%ToObject"  : forall a . 'a -> 'a // Any -> Object
operator "%ToString"  : 
    (Num -> /(([0-9])*|("+Infinity"|("-Infinity"|"NaN")))/) 
  & (forall a <: Str . 'a -> 'a)
operator "%ToBoolean" : (True -> True) & (False -> False) & (Any -> Bool) 

type Object  = rec obj . {
  * : _,
  __proto__: Null,
  create: { 
    "-*- code -*-": forall a . 'a => {__proto__: 'a},
    __proto__: obj,
    * : _
  }
}

Object : Object

type Array = 
  typrec  array :: * => * . 
    typlambda a :: * . {
      /(([0-9])*|("+Infinity"|("-Infinity"|"NaN")))/ : 'a,
      length : Num,
      * : _,
      __proto__: {
        __proto__: Object,
        * : _,
        // Note how the type of "this" is array<'a>. If these are applied
        // as methods, arr.map(...), then the inner 'a and outer 'a will
        // be the same.
        map: forall a . forall b . ['array<'a>] ('a -> 'b) -> 'array<'b>,
        slice: forall a . ['array<'a>] Num * Num + Undef -> 'array<'a>,
        concat: forall a . ['array<'a>] 'array<'a> -> 'array<'a>,
        forEach: forall a . ['array<'a>] ('a -> Any) -> Undef,
        filter: forall a . ['array<'a>] ('a -> Bool) -> 'array<'a>,
        every: forall a . ['array<'a>] ('a -> Bool) -> Bool,
        some: forall a . ['array<'a>] ('a -> Bool) -> Bool,
        reduce: forall a . ['array<'a>] ('a * 'a -> 'a) -> 'a,
        reduceRight: forall a . ['array<'a>] ('a * 'a -> 'a) -> 'a,
        push: forall a . ['array<'a>] 'a -> Undef,
        pop: forall a . ['array<'a>] -> 'a,
        shift: forall a . ['array<'a>] -> 'a,
        unshift: forall a .['array<'a>] -> 'a,
        reverse: forall a . ['array<'a>] -> 'array<'a>,
        sort: forall a . ['array<'a>] ('a -> Num) + Undef-> 'array<'a>,
        join: forall a . ['array<'a>] -> Str,
        toString: forall a . ['array<'a>] -> Str
      }
  }


type RegExp  = {
  __proto__: {
    __proto__: Object,
    match : Str -> Null + Array<Str>,
    test : Str -> Bool
  },
  source : Str,
  *: _
}

type Num = {
  __proto__: Object
}

Number : Any -> Num

type Str = {
  __proto__: Object,
  charCodeAt : Num -> Num,
  lastIndexOf : Str * Num + Undef -> Num,
  substring : Num * Num + Undef -> Str,
  substr : Num * Num -> Str, //yes there is 2 of them
  length : Num,
  charAt : Num -> Str,
  toLowerCase : -> Str,
  indexOf : Str -> Num,
}

Str_fromCharCode : Num -> Str

String : Any -> Str

type Bool = {
  __proto__: Object
}

type Date = {
  __proto__: Object,
  getDate : -> Num,
  getDay : -> Num,
  getFullYear : -> Num,
  getHours : -> Num,
  getMilliseconds : -> Num,
  getMinutes : -> Num,
  getMonth : -> Num,
  getSeconds : -> Num,
  getTime : -> Num,
  getTimezoneOffset : -> Num,
  getUTCDate : -> Num,
  getUTCDay : -> Num,
  getUTCFullYear : -> Num,
  getUTCHours : -> Num,
  getUTCMilliseconds : -> Num,
  getUTCMinutes : -> Num,
  getUTCMonth : -> Num,
  getUTCSeconds : -> Num,
  getYear : -> Num,

  parse : Str -> Num,

  setDate : Num -> Num,
  setFullYear : Num * Num + Undef * Num + Undef -> Num,
  setHours : Num * Num + Undef * Num + Undef * Num + Undef -> Num,
  setMilliseconds : Num -> Num,
  setMinutes : Num * Num + Undef * Num + Undef -> Num,
  setMonth : Num * Num + Undef -> Num,
  setSeconds : Num * Num + Undef -> Num,
  setTime : Num -> Num,
  setUTCDate : Num -> Num,
  setUTCFullYear : Num * Num + Undef * Num + Undef -> Num,
  setUTCHours : Num * Num + Undef * Num + Undef * Num + Undef -> Num,
  setUTCMilliseconds : Num -> Num,
  setUTCMinutes : Num * Num + Undef * Num + Undef -> Num,
  setUTCMonth : Num * Num + Undef -> Num,
  setUTCSeconds : Num * Num + Undef -> Num,
  setYear : Num -> Num,

  toDateStr : -> Str,
  toGMTStr : -> Str,
  toLocaleDateStr : -> Str,
  toLocaleStr : -> Str,
  toLocaleTimeStr : -> Str,
  toStr : -> Str,
  toTimeStr : -> Str,
  toUTCStr : -> Str,

  valueOf : -> Num,
}

type Global = { 
  __proto__: Object,
  encodeURI : Str -> Str, 
  parseNum : Str + Num * Num + Undef -> Num,
  parseFloat : Str + Num -> Num,
  undefined: Undef,
  Date : Str + Date + Undef -> Date,
  simpleSetTimeout : (Num -> Undef) * Num -> Num,
  Math: {
    __proto__: Object,
    E : Num,
    LN10 : Num,
    LN2 : Num,
    LOG2E : Num,
    LOG10E : Num,
    PI : Num,
    SQRT1_2 : Num,
    SQRT2 : Num,
    abs : forall a <: Num . 'a -> 'a,
    acos : Num -> Num,
    asin : Num -> Num,
    atan : Num -> Num,
    atan2 : Num -> Num,
    ceil : Num -> Num,
    cos : Num -> Num,
    exp : Num -> Num,
    floor : Num -> Num,
    log : Num -> Num,
    max : forall a <: Num . 'a * 'a -> 'a,
    min : forall a <: Num . 'a * 'a -> 'a,
     // See page 128 of ECMA262-3 .pdf. What is going on with Math.pow?!
    pow : forall a <: Num . 'a * 'a -> 'a,
    random : -> Num,
    // round(NaN) === NaN ...
    round : Num -> Num,
    sin : Num -> Num,
    sqrt : Num -> Num,
    tan : Num -> Num
  }
}

%global : Global

////////////////////////////////////////

primitive @Unsafe
type Ext = 
  rec ext . 
    Num + Bool + Undef + Str + Null +
    {
      __proto__: Object,
      "-*- code -*-" : Null + ('ext => 'ext),
      * : 'ext + @Unsafe,
    }
