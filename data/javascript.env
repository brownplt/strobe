// NOTE: This file should _only_ contain class definitions. The fields of
// HTMLWindow (the global object's type) are automatically added to the
// initial environment.

// The type of comparisons may seem unnecessarily restrictive. However, these
// types ensure that .toString() and .valueOf() are not called.
operator "<" : forall a <: Number + String . 'a * 'a -> Boolean
operator "<=" : forall a <: Number + String . 'a * 'a -> Boolean
operator ">" : forall a <: Number + String . 'a * 'a -> Boolean
operator ">=" : forall a <: Number + String . 'a * 'a -> Boolean
operator "==" : forall a . 'a * 'a -> Boolean
operator "!=" : forall a . 'a * 'a -> Boolean

// TODO: verify these are safe, like other comparisons
operator "&&" : forall a . forall b . 'a * 'b -> Boolean + 'b
operator "||" : forall a . forall b . 'a * 'b -> 'a + 'b

// int args, num result
operator "*" : forall a <: Number . 'a * 'a -> 'a
operator "/" : Number * Number -> Number
operator "%" : forall a <: Number . 'a * 'a -> 'a // might restrict to Int
operator "-" : forall a <: Number . 'a * 'a -> 'a
operator "<<" : Int * Int -> Int
operator ">>" : Int * Int -> Int
operator ">>>" : Int * Int -> Int
operator "&" : Int * Int -> Int
operator "^" : Int * Int -> Int
operator "|" : Int * Int -> Int
// type-system win
operator "+" : forall a <: Number + String . 'a * 'a -> 'a

operator "===" : forall a . 'a * 'a -> Boolean
operator "!==" : forall a . 'a * 'a -> Boolean

operator "prefix:!" : Boolean -> Boolean
operator "prefix:~" : Number -> Int
operator "prefix:+" : forall a <: Number . 'a -> 'a
operator "prefix:-" : forall a <: Number . 'a -> 'a
operator "prefix:typeof" : forall a . 'a -> String
operator "prefix:void" : forall a . 'a -> Void

class Object {
}

class Number prototype Object {
}

class String prototype Object {
  charCodeAt : Int -> Double
}

class Int prototype Number {
  toString : -> String
}

class Array prototype Object {
}

class Undefined {
}

class Boolean prototype Object { }

class Date prototype Object {
  setDate : Number -> Date,
  getDate : -> Number,
  valueOf : -> Int,
  getMonth : -> Int,
  getYear : -> Int
}

val Date : String + Date + Void-> Date

class Global { 
  parseInt : String + Number * Int + Void -> Int,
  parseFloat : String + Number -> Double,
  undefined: Void,
  Math: {
    E : Number,
    LN10 : Number,
    LN2 : Number,
    LOG2E : Number,
    LOG10E : Number,
    PI : Number,
    SQRT1_2 : Number,
    SQRT2 : Number,
    abs : forall a <: Number . 'a -> 'a,
    acos : Number -> Number,
    asin : Number -> Number,
    atan : Number -> Number,
    atan2 : Number -> Number,
    ceil : Number -> Int,
    cos : Number -> Number,
    exp : Number -> Number,
    floor : Number -> Int,
    log : Number -> Number,
    max : forall a <: Number . 'a * 'a -> 'a,
    min : forall a <: Number . 'a * 'a -> 'a,
     // See page 128 of ECMA262-3 .pdf. What is going on with Math.pow?!
    pow : forall a <: Number . 'a * 'a -> 'a,
    random : -> Number,
    // round(NaN) === NaN ...
    round : Number -> Number,
    sin : Number -> Number,
    sqrt : Number -> Number,
    tan : Number -> Number
  }
}


