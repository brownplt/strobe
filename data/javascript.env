// NOTE: This file should _only_ contain class definitions. The fields of
// HTMLWindow (the global object's type) are automatically added to the
// initial environment.

// The type of comparisons may seem unnecessarily restrictive. However, these
// types ensure that .toStr() and .valueOf() are not called.
operator "<" : forall a <: Num + Str . 'a * 'a -> Bool
operator "<=" : forall a <: Num + Str . 'a * 'a -> Bool
operator ">" : forall a <: Num + Str . 'a * 'a -> Bool
operator ">=" : forall a <: Num + Str . 'a * 'a -> Bool
operator "==" : forall a . 'a * 'a -> Bool
operator "!=" : forall a . 'a * 'a -> Bool

// TODO: verify these are safe, like other comparisons
operator "&&" : forall a . forall b . 'a * 'b -> Bool + 'b
operator "||" : forall a . forall b . 'a * 'b -> 'a + 'b

// int args, num result
operator "*" : forall a <: Num . 'a * 'a -> 'a
operator "/" : Num * Num -> Num
operator "%" : forall a <: Num . 'a * 'a -> 'a // might restrict to Int
operator "-" : forall a <: Num . 'a * 'a -> 'a
operator "<<" : Int * Int -> Int
operator ">>" : Int * Int -> Int
operator ">>>" : Int * Int -> Int
operator "&" : Int * Int -> Int
operator "^" : Int * Int -> Int
operator "|" : Int * Int -> Int
// type-system win
operator "+" : forall a <: Num + Str . 'a * 'a -> 'a
operator "in" : forall a <: { __proto__: Any } . Str * 'a -> Bool

operator "===" : forall a . 'a * 'a -> Bool
operator "!==" : forall a . 'a * 'a -> Bool

operator "charAt" : Str * Num -> Str

operator "prefix:!" : Bool -> Bool
operator "prefix:~" : Num -> Int
operator "prefix:+" : forall a <: Num . 'a -> 'a
operator "prefix:-" : forall a <: Num . 'a -> 'a
operator "prefix:typeof" : forall a . 'a -> Str
operator "prefix:void" : forall a . 'a -> Undef

operator "%ToObject"  : forall a . 'a -> 'a // Any -> Object
operator "%ToString"  : 
    (Int -> /(([0-9])*|("+Infinity"|("-Infinity"|"NaN")))/) 
  & (forall a <: Str . 'a -> 'a)
operator "%ToBoolean" : Any -> Bool

type Object  = {
  __proto__: Null,
  create: forall a . 'a -> {__proto__: 'a}
}

type Array = 
  typrec  array :: * => * . 
    typlambda a :: * . {
      /(([0-9])*|("+Infinity"|("-Infinity"|"NaN")))/ : 'a,
      length : Int,
      * : _,
      __proto__: {
        __proto__: Object,
        * : _,
        slice: forall a . ['array<'a>] Int * Int + Undef -> 'array<'a>,
        concat: forall a . ['array<'a>] 'array<'a> -> 'array<'a>,
        map: forall a . forall b . ['array<'a>] ('a -> 'b) -> 'array<'b>,
        forEach: forall a . ['array<'a>] ('a -> Any) -> Undef,
        filter: forall a . ['array<'a>] ('a -> Bool) -> 'array<'a>,
        every: forall a . ['array<'a>] ('a -> Bool) -> Bool,
        some: forall a . ['array<'a>] ('a -> Bool) -> Bool,
        reduce: forall a . ['array<'a>] ('a * 'a -> 'a) -> 'a,
        reduceRight: forall a . ['array<'a>] ('a * 'a -> 'a) -> 'a,
        push: forall a . ['array<'a>] 'a -> Undef,
        pop: forall a . ['array<'a>] -> 'a,
        shift: forall a . ['array<'a>] -> 'a,
        unshift: forall a .['array<'a>] -> 'a,
        reverse: forall a . ['array<'a>] -> 'array<'a>,
        sort: forall a . ['array<'a>] ('a -> Int) + Undef-> 'array<'a>,
        join: forall a . ['array<'a>] -> Str,
        toString: forall a . ['array<'a>] -> Str
      }
  }


type RegExp  = {
  __proto__: {
    __proto__: Object,
    match : Str -> Null + Array<Str>,
    test : Str -> Bool
  },
  source : Str
}

type Num = {
  __proto__: Object
}

Number : Any -> Num

type Str = {
  __proto__: Object,
  charCodeAt : Int -> Int,
  lastIndexOf : Str * Int + Undef -> Int,
  substring : Int * Int + Undef -> Str,
  substr : Int * Int -> Str, //yes there is 2 of them
  length : Int,
  charAt : Int -> Str,
  toLowerCase : -> Str,
  indexOf : Str -> Int,
}

Str_fromCharCode : Int -> Str

String : Any -> Str

type Bool = {
  __proto__: Object
}

type Date = {
  __proto__: Object,
  getDate : -> Int,
  getDay : -> Int,
  getFullYear : -> Int,
  getHours : -> Int,
  getMilliseconds : -> Int,
  getMinutes : -> Int,
  getMonth : -> Int,
  getSeconds : -> Int,
  getTime : -> Int,
  getTimezoneOffset : -> Int,
  getUTCDate : -> Int,
  getUTCDay : -> Int,
  getUTCFullYear : -> Int,
  getUTCHours : -> Int,
  getUTCMilliseconds : -> Int,
  getUTCMinutes : -> Int,
  getUTCMonth : -> Int,
  getUTCSeconds : -> Int,
  getYear : -> Int,

  parse : Str -> Int,

  setDate : Int -> Int,
  setFullYear : Int * Int + Undef * Int + Undef -> Int,
  setHours : Int * Int + Undef * Int + Undef * Int + Undef -> Int,
  setMilliseconds : Int -> Int,
  setMinutes : Int * Int + Undef * Int + Undef -> Int,
  setMonth : Int * Int + Undef -> Int,
  setSeconds : Int * Int + Undef -> Int,
  setTime : Int -> Int,
  setUTCDate : Int -> Int,
  setUTCFullYear : Int * Int + Undef * Int + Undef -> Int,
  setUTCHours : Int * Int + Undef * Int + Undef * Int + Undef -> Int,
  setUTCMilliseconds : Int -> Int,
  setUTCMinutes : Int * Int + Undef * Int + Undef -> Int,
  setUTCMonth : Int * Int + Undef -> Int,
  setUTCSeconds : Int * Int + Undef -> Int,
  setYear : Int -> Int,

  toDateStr : -> Str,
  toGMTStr : -> Str,
  toLocaleDateStr : -> Str,
  toLocaleStr : -> Str,
  toLocaleTimeStr : -> Str,
  toStr : -> Str,
  toTimeStr : -> Str,
  toUTCStr : -> Str,

  valueOf : -> Int,
}

type Global = { 
  __proto__: Object,
  encodeURI : Str -> Str, 
  parseInt : Str + Num * Int + Undef -> Int,
  parseFloat : Str + Num -> Num,
  undefined: Undef,
  Date : Str + Date + Undef -> Date,
  Math: {
    __proto__: Object,
    E : Num,
    LN10 : Num,
    LN2 : Num,
    LOG2E : Num,
    LOG10E : Num,
    PI : Num,
    SQRT1_2 : Num,
    SQRT2 : Num,
    abs : forall a <: Num . 'a -> 'a,
    acos : Num -> Num,
    asin : Num -> Num,
    atan : Num -> Num,
    atan2 : Num -> Num,
    ceil : Num -> Int,
    cos : Num -> Num,
    exp : Num -> Num,
    floor : Num -> Int,
    log : Num -> Num,
    max : forall a <: Num . 'a * 'a -> 'a,
    min : forall a <: Num . 'a * 'a -> 'a,
     // See page 128 of ECMA262-3 .pdf. What is going on with Math.pow?!
    pow : forall a <: Num . 'a * 'a -> 'a,
    random : -> Num,
    // round(NaN) === NaN ...
    round : Num -> Num,
    sin : Num -> Num,
    sqrt : Num -> Num,
    tan : Num -> Num
  }
}

%global : Global
