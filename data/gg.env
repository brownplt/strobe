
// Based on http://code.google.com/apis/desktop/docs/gadget_apiref.html

gddSoundStateStopped : Int
gddSoundStatePlaying : Int
gddItemDisplayAsNotification : Int
gddDetailsViewFlagToolbarOpen : Int
gddDetailsViewFlagNone : Int
gddTargetSidebar : Int
gddTargetFloatingView : Int

class Point {
  x : Int,
  y : Int
}

class Audioclip {
  balance : Int,
  currentPosition : Int,
  duration : Int,
  error: Int,
  src : String,
  state : Int,
  volume : Int,

  play : -> Undef,
  pause : -> Undef,
  stop : -> Undef,

  onStateChange : Audioclip * Int -> Undef
}

class Menu  {
  AddItem : String * Int * ({ } -> Undef) -> Undef
}

class BasicElement {
  cursor : String,
  dropTarget : Boolean, 
  enabled : Boolean,
  height : Int,
  hitTest : String,
  mask : String,
  name : String,        
  offsetHeight : Int,   
  offsetWidth : Int,
  offsetX : Int, //note: these offsets are read only
  offsetY : Int,
  opacity : Int,
  parentElement : BasicElement,
  pinX : Int,
  pinY : Int,
  rotation : Number,
  tagName : String,
  tooltip : String,
  width : Int,
  visible : Boolean,
  x : Int,
  y : Int,

  focus : -> Undef,
  killFocus : -> Undef,
  removeAllElements : -> Undef
}

class A prototype BasicElement {
  href : String,
}

class ContentItem {
  image : Image,
  notifier_image : Image,
  time_created : Date,
  heading : String,
  source : String,
  snippet : String,
  open_command : String,
  layout : Int,
  flags : Int, //write-only
  tooltip : String
}

class Button prototype BasicElement {
  image : String,
  overImage : String,
  downImage : String,
  disabledImage : String,
  caption : String, //omg undoc
  onclick : -> Undef,
}

class Contentarea {
  contentFlags : Int,
  maxContentItems : Int,
  contentItems : Any,
  pinImages : Any,

  addContentItem : ContentItem * Int -> Undef,
  removeContentItem : ContentItem -> Undef,
  removeAllContentItems : -> Undef
}

class Image {

}

class Img prototype BasicElement {
  colorMultiply : String,
  cropMaintainAspect : String,
  src : String,
  srcHeight : Int,
  srcWidth : Int,
  setSrcSize : Int * Int -> Undef
}

class Div prototype BasicElement {
  appendElement : String -> BasicElement,
}

class Label prototype BasicElement {
  align : String,
  bold : Boolean,
  color : String,
  font : String,
  innerText : String,
  italic : Boolean,
  size : Int,
  strikeout : Boolean,
  trimming : String,
  underline : Boolean,   
  vAlign : String,
  wordWrap : Boolean,
}

class Edit prototype BasicElement {
  value : String,
  readonly : Boolean,
  bold : Boolean,
  size : Int,
  color : String,
  strikeout : Boolean,
}

//checkbox + radio are the same, according to the api
class Checkbox prototype BasicElement {
  value : Boolean
}
class Radio prototype BasicElement {
  value : Boolean
}



class Event {
  returnValue : Boolean, //write-only
  srcElement : BasicElement,
  type : String,

  button : Int,
  wheelDelta : Int,
  x : Int, 
  y : Int,

  dragFiles : Collection,

  keyCode : Int,

  height : Int,
  width : Int,

  propertyName : String,

  cookie : Int,
  value : Int,

  perfmon : Any
}

class Progressbar prototype BasicElement {
  emptyImage : String,
  fullImage : String,
  max : Int,
  min : Int,
  orientation : String,
  thumbDisabledImage : String,
  thumbDownImage : String,
  thumbOverImage : String,
  thumbImage : String,
  value : Int,
}

class View prototype Global {
  alert : String -> Undef,
  caption : String,
  event : Event,
  height : Int,
  width : Int,
  resizable : Bool,
  showCaptionAlways : Bool,

  beginAnimation : (-> Undef) * Int * Int * Int -> Int,
  cancelAnimation : Int -> Undef,

  setTimeout : (-> Undef) * Int -> Int,
  setInterval : ( -> Undef) * Int -> Int,
  clearInterval : Int -> Undef,
  clearTimeout : Int -> Undef,
  confirm : String -> Boolean,
  
  encodeURI : String -> String,

  ContentItem : -> ContentItem,

  resizeBy : Int * Int -> Undef,
  resizeTo : Int * Int -> Undef,
  
}

view : View

framework : {
  openURL : String -> Undef,
  audio : {
    play : String * (Undef + (Audioclip * Int -> Undef)) -> Audioclip,
    open : String * (Undef + (Audioclip * Int -> Undef)) -> Audioclip,    
    stop : Audioclip -> Undef,
  },
  system : {
    cursor: {
      position : Point
    }
  },
  BrowseForFile : String -> String,
}

options : { 
  getValue : String -> Any,
  putDefaultValue : String * Any -> Undef,
  putValue : String * Any -> Undef
}

event : Event

class Storage {
  extract : String -> String,
  openText : String -> String
}
class Gadget {
  debug : { trace : String -> Undef },
  storage : Storage,
}
storage : Storage

gadget : Gadget

class Plugin {
  onAddCustomMenuItems : Menu -> Undef,
  max_content_items : Int
}

class DetailsView { 
  html_content : Boolean,
  setContent : String * (Undef + Int) * String * Boolean * Int -> Undef
}

//various active x objects:
class ActiveXObject {
}

class Folder {
  self : {Path : String},
}

class ShellApplication prototype ActiveXObject {
  Open : String -> Undef,
  BrowseForFolder : Int * String * Int -> Folder + Null
}

class Voice {
  //never used, dnno what's in here.
}
class SAPISpVoice prototype ActiveXObject {
  GetVoices : -> Array<Voice>,
  Speak : String * Int -> Undef,
  WaitUntilDone : Int -> Boolean,
  AudioOutputStream : SAPISpFileStream1 + Null,
  Pause : -> Undef
}

class SAPISpFileStream1 prototype ActiveXObject {
  open : String * Int -> Undef,
  Close : -> Undef,
}

ActiveXObject : String -> ActiveXObject


DetailsView : -> DetailsView
plugin : Plugin
pluginHelper : Plugin

class XMLHttpRequest {
   open : String * String * Boolean -> Undef,
   onreadystatechange : -> Undef,
   send : Null -> Undef,
   readyState : Int,
   responseText : String
}

XMLHttpRequest : -> XMLHttpRequest

class Collection {
}

class Enumerator {
  atEnd : -> Boolean,
  item : -> Any,
  moveNext : -> Undef
}

Enumerator : Collection -> Enumerator