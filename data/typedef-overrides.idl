typedef nsISupports nsQIResult;
typedef nsISupports nsIIDRef;

typedef DOMString ACString;
typedef DOMString AString;
typedef DOMString AUTF8String;

[scriptable]
interface DOMElementList : nsISupports
{
  [getter,forward(getNodeAt)] nsIDOMElement    item(in unsigned long index);
  readonly attribute unsigned long          length;
};

partial interface nsIDOMDocument {
  [UseType("Str -> DOMElementList")] nsIDOMNodeList getElementsByTagName(in DOMString tagname);
  [UseType("Str * Str -> DOMElementList")] 
  nsIDOMNodeList getElementsByTagNameNS(in DOMString tagname, 
                                        in DOMString localName);
  [UseType("Str -> DOMElementList")] nsIDOMNodeList getElementsByClassName(in DOMString classes);
};

partial interface nsIDOMHTMLDocument {
  [UseType("Str -> DOMElementList")] nsIDOMNodeList getElementsByName(in DOMString elementName);
};

partial interface nsIDOMXULDocument {
  [UseType("Str * Str -> DOMElementList")] 
  nsIDOMNodeList getElementsByAttribute(in DOMString name,
                                        in DOMString value);
  [UseType("Str * Str * Str -> DOMElementList")] 
  nsIDOMNodeList getElementsByAttributeNS(in DOMString namespaceURI,
                                          in DOMString name,
                                          in DOMString value);
};

partial interface nsIDOMXULElement {
  [UseType("Str * Str -> DOMElementList")] 
  nsIDOMNodeList getElementsByAttribute(in DOMString name,
                                        in DOMString value);
  [UseType("Str * Str * Str -> DOMElementList")] 
  nsIDOMNodeList getElementsByAttributeNS(in DOMString namespaceURI,
                                          in DOMString name,
                                          in DOMString value);
};

partial interface nsIDOMNodeSelector {
  [UseType("Str -> DOMElementList")]
  nsIDOMNodeList querySelectorAll([Null(Stringify)] in DOMString selectors);
};


partial interface nsIDOMElement {
  [UseType("Str -> DOMElementList")] nsIDOMNodeList getElementsByTagName(in DOMString tagname);
  [UseType("Str * Str -> DOMElementList")] 
  nsIDOMNodeList getElementsByTagNameNS(in DOMString tagname, 
                                        in DOMString localName);
  [UseType("Str -> DOMElementList")] nsIDOMNodeList getElementsByClassName(in DOMString classes);
};


partial interface nsIFile {
  [unsafe] void create(in unsigned long type, in unsigned long permissions);
  [unsafe] void createUnique(in unsigned long type, in unsigned long permissions);
};

partial interface nsIProcess {
  [unsafe] void kill();
  [unsafe] void run(in boolean blocking, [array, size_is(count)] in string args,
                    in unsigned long count);
  [unsafe] void runAsync([array, size_is(count)] in string args, in unsigned long count,
                         [optional] in nsIObserver observer, [optional] in boolean holdWeak);
  [unsafe] void runw(in boolean blocking, [array, size_is(count)] in wstring args,
                     in unsigned long count);
  [unsafe] void runwAsync([array, size_is(count)] in wstring args,
                          in unsigned long count,
                          [optional] in nsIObserver observer, [optional] in boolean holdWeak);

};

partial interface nsIFileOutputStream {
  [unsafe] void init(in nsIFile file, in long ioFlags, in long perm,
                     in long behaviorFlags);
};

partial interface nsIOutputStream {
  [unsafe] unsigned long write(in string aBuf, in unsigned long aCount);
  [unsafe] unsigned long writeFrom(in nsIInputStream aFromStream,
                                   in unsigned long aCount);
};

partial interface nsIBinaryOutputStream {
  [unsafe] void writeBoolean(in boolean aBoolean);
  [unsafe] void write8(in PRUint8 aByte);
  [unsafe] void write16(in PRUint16 a16);
  [unsafe] void write32(in PRUint32 a32);
  [unsafe] void write64(in PRUint64 a64);
  [unsafe] void writeFloat(in float aFloat);
  [unsafe] void writeDouble(in double aDouble);
  [unsafe] void writeStringZ(in string aString);
  [unsafe] void writeWStringZ(in wstring aString);
  [unsafe] void writeUtf8Z(in wstring aString);
  [unsafe] void writeBytes([size_is(aLength)] in string aString, in PRUint32 aLength);
  [unsafe] void writeByteArray([array, size_is(aLength)] in PRUint8 aBytes, in PRUint32 aLength);
};

partial interface nsIPrivateBrowsingService {
  [PrivateBrowsingCheck] attribute boolean privateBrowsingEnabled;
};

partial interface nsISupports {
  [QueryInterfaceType] void QueryInterface(in nsIIDRef uuid, 
                                           [iid_is(uuid),retval] out nsQIResult result);
};

partial interface nsIJSCID {
    [implicit_jscontext,optional_argc,QueryInterfaceType] jsval createInstance([optional] in jsval iid);
    [implicit_jscontext,optional_argc,QueryInterfaceType] jsval getService([optional] in jsval iid);
};

partial interface nsIInterfaceRequestor {
  [QueryInterfaceType] void getInterface(in nsIIDRef uuid, [iid_is(uuid),retval] out nsQIResult result);
};

partial interface nsIPrefService {
  [unsafe] void savePrefFile(in nsIFile aFile);
  [unsafe] void resetPrefs();
  [unsafe] void resetUserPrefs();
};

partial interface nsIPrefBranch {
  [QueryElementAtType(1)] void getComplexValue(in string aPrefName, in nsIIDRef aType,
                                               [iid_is(aType), retval] out nsQIResult aValue);
  [unsafe] void setBoolPref(in string aPrefName, in boolean aValue);
  [unsafe] void setCharPref(in string aPrefName, in string aValue);
  [unsafe] void setIntPref(in string aPrefName, in long aValue);
  [unsafe] void setComplexValue(in string aPrefName, in nsIIDRef aType, in nsISupports aValue);
  [unsafe] void clearUserPref(in string aPrefName);
  [unsafe] void deleteBranch(in string aStartingAt);
  [unsafe] void unlockPref(in string aPrefName);
  [unsafe] void lockPref(in string aPrefName);
  [unsafe] void resetBranch(in string aStartingAt);
};

partial interface nsIArray {
  [QueryElementAtType(1)] void queryElementAt(in unsigned long index,
                                              in nsIIDRef uuid,
                                              [iid_is(uuid), retval] out nsQIResult result);
};

partial interface nsIAuthPromptProvider {
  [QueryElementAtType(1)] void getAuthPrompt(in PRUint32 aPromptReason, in nsIIDRef iid,
                                             [iid_is(iid),retval] out nsQIResult result);
};

partial interface nsICollection {
  [QueryElementAtType(1)] void QueryElementAt(in PRUint32 index, in nsIIDRef uuid, 
                                              [iid_is(uuid),retval] out nsQIResult result);
};

partial interface nsIFactory {
  [QueryElementAtTyoe(1)] void createInstance(in nsISupports aOuter, in nsIIDRef iid,
                                              [retval, iid_is(iid)] out nsQIResult result);
};

partial interface nsIPromptFactory {
  [QueryElementAtType(1)] void getPrompt(in nsIDOMWindow aParent, in nsIIDRef iid,
                                         [iid_is(iid),retval] out nsQIResult result);
};

partial interface nsIProperties {
  [QueryElementAtType(1)] void get(in string prop, in nsIIDRef iid, 
                                   [iid_is(iid),retval] out nsQIResult result);
};

partial interface nsIPropertyBag2 {
  [QueryElementAtType(1)] void getPropertyAsInterface(in AString prop,
                                                      in nsIIDRef iid,
                                                      [iid_is(iid), retval] out nsQIResult result);
};

partial interface nsIServiceManager {
  [QueryElementAtType(1)] void getService(in nsCIDRef aClass, 
                                          in nsIIDRef aIID, 
                                          [iid_is(aIID),retval] out nsQIResult result);

  [QueryElementAtType(1)] void getServiceByContractID(in string aContractID,
                                                      in nsIIDRef aIID, 
                                                      [iid_is(aIID),retval] out nsQIResult result);
};

partial interface nsIWeakReference {
  [QueryInterfaceType] void QueryReferent( in nsIIDRef uuid, [iid_is(uuid), retval] out nsQIResult result );
};

partial interface nsIXPConnectWrappedJS {
  [QueryInterfaceType] void aggregatedQueryInterface(in nsIIDRef uuid,
                                                     [iid_is(uuid),retval] out nsQIResult result);
};

partial interface nsIXPConnect {
  [QueryElementAtType(2)] void wrapJS(in JSContextPtr aJSContext,
                                      in JSObjectPtr  aJSObj,
                                      in nsIIDRef     aIID,
                                      [iid_is(aIID),retval] out nsQIResult result);
  [QueryElementAtType(3)] void wrapJSAggregatedToNative(in nsISupports  aOuter,
                                                        in JSContextPtr aJSContext,
                                                        in JSObjectPtr  aJSObj,
                                                        in nsIIDRef     aIID,
                                                        [iid_is(aIID),retval] out nsQIResult result);
};

partial interface nsIDOMNode {
  [UseType("forall n <: nsIDOMNode . [this(nsIDOMNode)] nsIDOMNode * 'n -> 'n")]
  nsIDOMNode replaceChild(in nsIDOMNode newChild, in nsIDOMNode oldChild) raises(DOMException);
  [UseType("forall n <: nsIDOMNode . ['n] Bool -> 'n")]
  nsIDOMNode cloneNode(in boolean deep);
};

partial interface nsIDOMWindow {
//  boolean getBoolPref(in DOMString prefName, in boolean def);
//  void openUILinkIn(in DOMString url, in DOMString where, in boolean aAllowThirdPartyFixup, in DOMString aPostData, in DOMString refererURI);
//  void openUILink(in DOMString url, in nsIDOMEvent event, in boolean aIgnoreButton, in boolean aIgnoreAlt, in DOMString where,
//                  in boolean aAllowThirdPartyFixup, in DOMString aPostData, in DOMString refererURI);
//  boolean isBlankPageURL(in DOMString aURL);
//  DOMString getBrowserURL();
//  nsIDOMWindow getTopWin(in boolean skipPopups);
//  void openTopWin(in DOMString url);
//  DOMString whereToOpenLink(in nsIDOMEvent event, in boolean aIgnoreButton, in boolean aIgnoreAlt);
//  void openLinkIn(in DOMString url, in DOMString where, in jsval params);
//  void checkForMiddleClick(in nsIDOMNode node, in nsIDOMEvent event);
//  void closeMenus(in nsIDOMNode node);
//  DOMString gatherTextUnder(in nsIDOMNode node);
//  nsIShellService getShellService();
//  boolean isBidiEnabled();
//  void openAboutDialog();
//  nsIDOMWindow openPreferences(in DOMString paneID, in jsval extraArgs);
//  nsIDOMWindow openAdvancedPreferences(in DOMString tabID);
//  void openTroubleshootingPage();
//  void openFeedbackPage();
//  void buildHelpMenu();
//  boolean isElementVisible(in nsIDOMElement element);
//  DOMString makeURLAbsolute(in DOMString aBase, in DOMString aUrl);
//  void openNewTabWith(in DOMString aUrl, in nsIDocument aDocument, in jsval aPostData, in nsIDOMEvent event, in boolean aAllowThirdPartyFixup,
//                      in DOMString aReferrer);
//  void openNewWindowWith (in DOMString aUrl, in nsIDocument aDocument, in jsval aPostData, in boolean aAllowThirdPartyFixup, in DOMString aReferrer);
//  boolean isValidFeed(in jsval aLink, in DOMString aPrincipal, in boolean aIsFeed);
//  void openHelpLink(in DOMString aHelpTopic, in boolean aCalledFromModal);
//  void openPrefsHelp();
//  DOMString trimURL(in DOMString aUrl);
  boolean getBoolPref(in jsval prefName, in jsval def);
  void openUILinkIn(in jsval url, in jsval where, in jsval aAllowThirdPartyFixup, in jsval aPostData, in jsval refererURI);
  void openUILink(in jsval url, in jsval event, in jsval aIgnoreButton, in jsval aIgnoreAlt, in jsval where,
                  in jsval aAllowThirdPartyFixup, in jsval aPostData, in jsval refererURI);
  boolean isBlankPageURL(in jsval aURL);
  DOMString getBrowserURL();
  nsIDOMWindow getTopWin(in jsval skipPopups);
  void openTopWin(in jsval url);
  DOMString whereToOpenLink(in jsval event, in jsval aIgnoreButton, in jsval aIgnoreAlt);
  void openLinkIn(in jsval url, in jsval where, in jsval params);
  void checkForMiddleClick(in jsval node, in jsval event);
  void closeMenus(in jsval node);
  DOMString gatherTextUnder(in jsval node);
  nsIShellService getShellService();
  boolean isBidiEnabled();
  void openAboutDialog();
  nsIDOMWindow openPreferences(in jsval paneID, in jsval extraArgs);
  nsIDOMWindow openAdvancedPreferences(in jsval tabID);
  void openTroubleshootingPage();
  void openFeedbackPage();
  void buildHelpMenu();
  boolean isElementVisible(in jsval element);
  DOMString makeURLAbsolute(in jsval aBase, in jsval aUrl);
  void openNewTabWith(in jsval aUrl, in jsval aDocument, in jsval aPostData, in jsval event, in jsval aAllowThirdPartyFixup,
                      in jsval aReferrer);
  void openNewWindowWith (in DOMString jsval, in jsval aDocument, in jsval aPostData, in jsval aAllowThirdPartyFixup, in jsval aReferrer);
  boolean isValidFeed(in jsval aLink, in jsval aPrincipal, in jsval aIsFeed);
  void openHelpLink(in jsval aHelpTopic, in jsval aCalledFromModal);
  void openPrefsHelp();
  DOMString trimURL(in jsval aUrl);
};

partial interface nsIDOMWindow {
  nsIDOMWindow openDialog(in DOMString url, [optional] in DOMString name, [optional] in DOMString features,
                          [optional] in jsval params);
};

partial interface nsIDOMEventTarget {
  // The default type of listener -- restricted to unknown event types
  void addEventListener([UseType("/^(\"mouseup\"|\"mousedown\"|\"mousemove\"|\"click\"|\"dblclick\"|\"keydown\"|\"keypress\"|\"keyup\"|\"DOMAttrModified\")/")] 
                        in DOMString type,
                        in nsIDOMEventListener listener,
                        [optional] in boolean useCapture, [optional] in boolean wantsUntrusted);
  void addEventListener([UseType("/\"mousedown\"|\"mouseup\"|\"mousemove\"|\"click\"|\"dblclick\"/")]
                        in jsval dummy1,
                        [UseType("Immutable<[this(nsIDOMEventListener)] nsIDOMMouseEvent -> Undef>")]
                        in jsval listener,
                        [optional] in boolean useCapture, [optional] in boolean wantsUntrusted);
  void addEventListener([UseType("/\"keydown\"|\"keypress\"|\"keyup\"/")] in jsval dummy2,
                        [UseType("Immutable<[this(nsIDOMEventListener)] nsIDOMKeyEvent -> Undef>")]
                        in jsval listener,
                        [optional] in boolean useCapture, [optional] in boolean wantsUntrusted);
  void addEventListener([UseType("/\"DOMAttrModified\"/")] in jsval dummy3,
                        [UseType("Immutable<[this(nsIDOMEventListener)] nsIDOMMutationEvent -> Undef>")]
                        in jsval listener,
                        [optional] in boolean useCapture, [optional] in boolean wantsUntrusted);


  // The default type of listener -- restricted to unknown event types
  void removeEventListener([UseType("/^(\"mouseup\"|\"mousedown\"|\"mousemove\"|\"click\"|\"dblclick\"|\"keydown\"|\"keypress\"|\"keyup\"|\"DOMAttrModified\")/")] 
                           in DOMString type,
                           in nsIDOMEventListener listener,
                           [optional] in boolean useCapture);
  void removeEventListener([UseType("/\"mousedown\"|\"mouseup\"|\"mousemove\"|\"click\"|\"dblclick\"/")]
                           in jsval dummy1,
                           [UseType("Immutable<[this(nsIDOMEventListener)] nsIDOMMouseEvent -> Undef>")]
                           in jsval listener,
                           [optional] in boolean useCapture);
  void removeEventListener([UseType("/\"keydown\"|\"keypress\"|\"keyup\"/")] in jsval dummy2,
                           [UseType("Immutable<[this(nsIDOMEventListener)] nsIDOMKeyEvent -> Undef>")]
                           in jsval listener,
                           [optional] in boolean useCapture);
  void removeEventListener([UseType("/\"DOMAttrModified\"/")] in jsval dummy3,
                           [UseType("Immutable<[this(nsIDOMEventListener)] nsIDOMMutationEvent -> Undef>")]
                           in jsval listener,
                           [optional] in boolean useCapture);
};


nsIDOMWindow implements nsIDOMJSWindow;
nsIDOMWindow implements nsIDOMEventTarget;
nsIDOMDocument implements nsIDOMEventTarget;
nsIDOMDocument implements nsIDOMDocumentXBL;
nsIDOMHTMLDocument implements nsIDOMDocument;
nsIDOMXULDocument implements nsIDOMDocument;
nsIDOMElement implements nsIDOMEventTarget;
//nsIDOMElement implements nsIDOMElementCSSInlineStyle;
partial interface nsIDOMElement {
  [UseType("Mutable<nsIDOMCSSStyleDeclaration>")] attribute string style;
};
partial interface nsIDOMXULTreeElement {
  readonly attribute nsITreeContentView contentView;
};
nsIDOMXULTreeElement implements nsITreeBoxObject;
nsIDOMXULTreeElement implements nsIDOMXULMultiSelectControlElement;
nsIDOMXULTreeElement implements nsIAccessibleProvider;

nsIDOMCSSStyleDeclaration implements nsIDOMCSS2Properties;

interface nsIDOMXULTabElement : nsIDOMXULElement {
};
nsIDOMXULTabElement implements nsIDOMXULSelectControlItemElement;
nsIDOMXULTabElement implements nsIAccessibleProvider;

interface nsIDOMXULStringBundleElement : nsIDOMXULElement {
  readonly attribute nsIStringBundle stringBundle;
  readonly attribute nsISimpleEnumerator strings;
  attribute string src;
  wstring getString(in wstring aStringKey);
  wstring getFormattedString(in wstring aStringKey, [array, size_is(length)] in wstring aStringsArray,
                             in unsigned long length);
};

nsIDOMEvent implements nsIDOMNSEvent;


[scriptable, uuid(f559f340-5160-420f-abc8-19b251708e7e)]
interface nsIUpdateItem : nsISupports
{
  readonly attribute AString  id;
  readonly attribute AString  version;
  readonly attribute AString  minAppVersion;
  readonly attribute AString  maxAppVersion;
  readonly attribute AString  installLocationKey;
  readonly attribute AString  name;
  readonly attribute AString  xpiURL;
  readonly attribute AString  xpiHash;
  readonly attribute AString  iconURL;
  readonly attribute AString  updateRDF;
  readonly attribute AString  updateKey;
  const unsigned long TYPE_APP         = 0x01;
  const unsigned long TYPE_EXTENSION   = 0x02;
  const unsigned long TYPE_THEME       = 0x04;
  const unsigned long TYPE_LOCALE      = 0x08;
  const unsigned long TYPE_MULTI_XPI   = 0x20;
  const unsigned long TYPE_ADDON       = TYPE_EXTENSION + TYPE_THEME + TYPE_LOCALE;
  const unsigned long TYPE_ANY         = 0xff;
  readonly attribute long type;
  readonly attribute AString  targetAppID;
  void init(in AString id, in AString version,
            in AString installLocationKey, in AString minAppVersion,
            in AString maxAppVersion, in AString name,
            in AString downloadURL, in AString xpiHash, in AString iconURL,
            in AString updateURL, in AString updateKey, in long type,
            in AString targetAppID);
  readonly attribute AString objectSource;
};
