typedef nsISupports nsQIResult;
typedef nsISupports nsIIDRef;

typedef DOMString ACString;
typedef DOMString AString;
typedef DOMString AUTF8String;

partial interface nsIFile {
  [unsafe] void create(in unsigned long type, in unsigned long permissions);
};

partial interface nsIFileOutputStream {
  [unsafe] void init(in nsIFile file, in long ioFlags, in long perm,
                     in long behaviorFlags);
};

partial interface nsIOutputStream {
  [unsafe] unsigned long write(in string aBuf, in unsigned long aCount);
  [unsafe] unsigned long writeFrom(in nsIInputStream aFromStream,
                                   in unsigned long aCount);
};

partial interface nsIBinaryOutputStream {
  [unsafe] void writeBoolean(in boolean aBoolean);
  [unsafe] void write8(in PRUint8 aByte);
  [unsafe] void write16(in PRUint16 a16);
  [unsafe] void write32(in PRUint32 a32);
  [unsafe] void write64(in PRUint64 a64);
  [unsafe] void writeFloat(in float aFloat);
  [unsafe] void writeDouble(in double aDouble);
  [unsafe] void writeStringZ(in string aString);
  [unsafe] void writeWStringZ(in wstring aString);
  [unsafe] void writeUtf8Z(in wstring aString);
  [unsafe] void writeBytes([size_is(aLength)] in string aString, in PRUint32 aLength);
  [unsafe] void writeByteArray([array, size_is(aLength)] in PRUint8 aBytes, in PRUint32 aLength);
};

partial interface nsIPrivateBrowsingService {
  [PrivateBrowsingCheck] attribute boolean privateBrowsingEnabled;
};

partial interface nsISupports {
  [QueryInterfaceType] void QueryInterface(in nsIIDRef uuid, 
                                           [iid_is(uuid),retval] out nsQIResult result);
};

partial interface nsIJSCID {
    [implicit_jscontext,optional_argc,QueryInterfaceType] jsval createInstance([optional] in jsval iid);
    [implicit_jscontext,optional_argc,QueryInterfaceType] jsval getService([optional] in jsval iid);
};

partial interface nsIInterfaceRequestor {
  [QueryInterfaceType] void getInterface(in nsIIDRef uuid, [iid_is(uuid),retval] out nsQIResult result);
};

partial interface nsIPrefService {
  [unsafe] void savePrefFile(in nsIFile aFile);
};

partial interface nsIPrefBranch {
  [QueryElementAtType(1)] void getComplexValue(in string aPrefName, in nsIIDRef aType,
                                               [iid_is(aType), retval] out nsQIResult aValue);
};

partial interface nsIArray {
  [QueryElementAtType(1)] void queryElementAt(in unsigned long index,
                                              in nsIIDRef uuid,
                                              [iid_is(uuid), retval] out nsQIResult result);
};

partial interface nsIAuthPromptProvider {
  [QueryElementAtType(1)] void getAuthPrompt(in PRUint32 aPromptReason, in nsIIDRef iid,
                                             [iid_is(iid),retval] out nsQIResult result);
};

partial interface nsICollection {
  [QueryElementAtType(1)] void QueryElementAt(in PRUint32 index, in nsIIDRef uuid, 
                                              [iid_is(uuid),retval] out nsQIResult result);
};

partial interface nsIFactory {
  [QueryElementAtTyoe(1)] void createInstance(in nsISupports aOuter, in nsIIDRef iid,
                                              [retval, iid_is(iid)] out nsQIResult result);
};

partial interface nsIPromptFactory {
  [QueryElementAtType(1)] void getPrompt(in nsIDOMWindow aParent, in nsIIDRef iid,
                                         [iid_is(iid),retval] out nsQIResult result);
};

partial interface nsIProperties {
  [QueryElementAtType(1)] void get(in string prop, in nsIIDRef iid, 
                                   [iid_is(iid),retval] out nsQIResult result);
};

partial interface nsIPropertyBag2 {
  [QueryElementAtType(1)] void getPropertyAsInterface(in AString prop,
                                                      in nsIIDRef iid,
                                                      [iid_is(iid), retval] out nsQIResult result);
};

partial interface nsIServiceManager {
  [QueryElementAtType(1)] void getService(in nsCIDRef aClass, 
                                          in nsIIDRef aIID, 
                                          [iid_is(aIID),retval] out nsQIResult result);

  [QueryElementAtType(1)] void getServiceByContractID(in string aContractID,
                                                      in nsIIDRef aIID, 
                                                      [iid_is(aIID),retval] out nsQIResult result);
};

partial interface nsIWeakReference {
  [QueryInterfaceType] void QueryReferent( in nsIIDRef uuid, [iid_is(uuid), retval] out nsQIResult result );
};

partial interface nsIXPConnectWrappedJS {
  [QueryInterfaceType] void aggregatedQueryInterface(in nsIIDRef uuid,
                                                     [iid_is(uuid),retval] out nsQIResult result);
};

partial interface nsIXPConnect {
  [QueryElementAtType(2)] void wrapJS(in JSContextPtr aJSContext,
                                      in JSObjectPtr  aJSObj,
                                      in nsIIDRef     aIID,
                                      [iid_is(aIID),retval] out nsQIResult result);
  [QueryElementAtType(3)] void wrapJSAggregatedToNative(in nsISupports  aOuter,
                                                        in JSContextPtr aJSContext,
                                                        in JSObjectPtr  aJSObj,
                                                        in nsIIDRef     aIID,
                                                        [iid_is(aIID),retval] out nsQIResult result);
};

partial interface nsIDOMNode {
  [UseType("forall n <: nsIDOMNode . [this(nsIDOMNode)] nsIDOMNode * 'n -> 'n")]
  nsIDOMNode replaceChild(in nsIDOMNode newChild, in nsIDOMNode oldChild) raises(DOMException);
  [UseType("forall n <: nsIDOMNode . ['n] Bool -> 'n")]
  nsIDOMNode cloneNode(in boolean deep);
};

nsIDOMWindow implements nsIDOMJSWindow;
nsIDOMWindow implements nsIDOMEventTarget;

nsIDOMElement implements nsIDOMEventTarget;
//nsIDOMElement implements nsIDOMElementCSSInlineStyle;
partial interface nsIDOMElement {
  [UseType("Mutable<nsIDOMCSSStyleDeclaration>")] attribute string style;
};
partial interface nsIDOMXULTreeElement {
  readonly attribute nsITreeContentView contentView;
};
nsIDOMXULTreeElement implements nsITreeBoxObject;
nsIDOMXULTreeElement implements nsIDOMXULMultiSelectControlElement;
nsIDOMXULTreeElement implements nsIAccessibleProvider;

nsIDOMCSSStyleDeclaration implements nsIDOMCSS2Properties;

interface nsIDOMXULTabElement : nsIDOMXULElement {
};
nsIDOMXULTabElement implements nsIDOMXULSelectControlItemElement;
nsIDOMXULTabElement implements nsIAccessibleProvider;

interface nsIDOMXULStringBundleElement : nsIDOMXULElement {
  readonly attribute nsIStringBundle stringBundle;
  readonly attribute nsISimpleEnumerator strings;
  attribute string src;
  wstring getString(in wstring aStringKey);
  wstring getFormattedString(in wstring aStringKey, [array, size_is(length)] in wstring aStringsArray,
                             in unsigned long length);
};
