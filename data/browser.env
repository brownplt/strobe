// HTMLWindow is the type of the global object. All its fields are added to the
// initial environment.
class HTMLWindow prototype Global {
  document : HTMLDocument,
  setTimeout : ((-> Undef) + (Int -> Undef)) * Int -> Int,
  setInterval : ((-> Undef) + (Int -> Undef)) * Int -> Int,
  clearInterval : Int -> Undef,
  clearTimeout : Int -> Undef,
  window : HTMLWindow,
  console : {
    log : Str -> Undef, 
  },
  innerWidth : Int,
  innerHeight : Int,
}

class TextRectangle {
  left : Num,
  top : Num,
  right : Num,
  bottom : Num,
  width : Num,
  height : Num
}

class Style {
  position : Str,
  top : Str,
  left : Str,
  opacity : Str,
  width : Str,
  height : Str,

}

class Node {
  appendChild : Node -> Node,
}

class checked HTMLElement prototype Node {
  getBoundingClientRect : -> TextRectangle,
  onmousemove : Event -> Undef,
  style : Style,
}

class checked HTMLInputElement prototype HTMLElement {
  type : Str,
  value : Str,
  focus : -> Undef,
}

class checked HTMLDivElement prototype HTMLElement {

}

class checked HTMLDocument {
  getElementById : Str -> Null + HTMLElement,
  onclick : Event -> Undef,
  onmousemove : Event -> Undef,
  write : Str -> Undef,
  createElement : Str -> HTMLElement,
  addEventListener : Str * (Event -> Undef) * Bool -> Undef
}

class checked HTMLImageElement prototype HTMLElement {
  alt : Str,
  src : Str,
  useMap : Str,
  isMap : Bool,
  width : Int,
  height : Int,
  naturalWidth : Int,
  naturalHeight : Int,
  complete : Bool,

  onload : Event -> Undef,
}

class checked HTMLLabel {
  innerHTML : Str
}

// Claudiu: not sure if this is valid.. not sure what
// happens if an event of the wrong type appears (e.g. not a mouse move event)
// Arjun: I believe this stuff is generic.
class checked Event {
  pageX : Int,
  pageY : Int,
  clientX : Int,
  clientY : Int,
  preventDefault : -> Undef,
//  touches : Array<Event>,
  keyCode : Int,
}

//canvas!
class checked HTMLCanvasElement prototype HTMLElement {
  width : Int,
  height : Int,
  getContext : Str -> CanvasRenderingContext2D,
  toDataURL : Str + Undef -> Str,
}

class CanvasGradient { // *not* checkable
  addColorStop : Num * Str -> Undef
}

class CanvasPattern { // *not* checkable
}

class checked ImageData {
  width : Int,
  height : Int,
//  data : Array<Int> //really a CanvasPixelArray, but acts like this.
                    //also should really be Byte, not Int.
}

class checked CanvasRenderingContext2D {
  clearRect : Num * Num * Num * Num -> Undef,
  fillStyle : Str + CanvasGradient + CanvasPattern,
  fillRect : Num * Num * Num * Num -> Undef,
  fillText : Str * Num * Num -> Undef,
  beginPath : -> Undef,
  closePath : -> Undef,
  arc : Num * Num * Num * Num * Num * Bool -> Undef,
  fill : -> Undef,
  getImageData : Num * Num * Num * Num -> ImageData,
  putImageData : ImageData * Num * Num -> Undef,
  drawImage : HTMLImageElement * Num * Num -> Undef,
  lineCap : Str,
  strokeStyle : Str,
  font : Str,
  textAlign : Str,
}

