// HTMLWindow is the type of the global object. All its fields are added to the
// initial environment.
class HTMLWindow prototype Global {
  document : HTMLDocument,
  setTimeout : (-> Void) * Int -> Int,
  setInterval : ( -> Void) * Int -> Int,
  clearInterval : Int -> Void,
  clearTimeout : Int -> Void,
  window : HTMLWindow,
  console : {
    log : String -> Void, 
  },
}

class TextRectangle {
  left : Double,
  top : Double,
  right : Double,
  bottom : Double,
  width : Double,
  height : Double
}

class HTMLElement  {
  getBoundingClientRect : -> TextRectangle,
  onmousemove : Event -> Void
}

class HTMLDocument {
  getElementById : String -> Null + HTMLElement,
  onclick : Event -> Void,
  onmousemove : Event -> Void,
  write : String -> Void,
  createElement : String -> HTMLElement
}

class HTMLImageElement prototype HTMLElement {
  alt : String,
  src : String,
  useMap : String,
  isMap : Boolean,
  width : Int,
  height : Int,
  naturalWidth : Int,
  naturalHeight : Int,
  complete : Boolean,

  onload : Event -> Void,
}

class HTMLLabel {
  innerHTML : String
}

//not sure if this is valid.. not sure what
//happens if an event of the wrong type appears (e.g. not a mouse move event)
class Event {
  pageX : Int,
  pageY : Int,
  clientX : Int,
  clientY : Int
}

//canvas!
class HTMLCanvasElement prototype HTMLElement {
  width : Int,
  height : Int,
  getContext : String -> CanvasRenderingContext2D,
  toDataURL : String + Void -> String,
}

class CanvasGradient {
  addColorStop : Double * String -> Void
}

class CanvasPattern {
}

class ImageData {
  width : Int,
  height : Int,
  data : Array<Int> //really a CanvasPixelArray, but acts like this.
                    //also should really be Byte, not Int.
}

class CanvasRenderingContext2D {
  clearRect : Double * Double * Double * Double -> Void,
  fillStyle : String + CanvasGradient + CanvasPattern,
  fillRect : Double * Double * Double * Double -> Void,
  beginPath : -> Void,
  closePath : -> Void,
  arc : Double * Double * Double * Double * Double * Boolean -> Void,
  fill : -> Void,
  getImageData : Double * Double * Double * Double -> ImageData,
  putImageData : ImageData * Double * Double -> Void,
  drawImage : HTMLImageElement * Double * Double -> Void,
}

