type Extension = rec x . Num + Str + Bool + Undef + Null + {
  *: x,
  '[[code]]':? x ... -> x
}

-- Catch-all type for interface ids
abstype nsIID

-- File-system types
abstype nsIOutputStream
abstype nsIInputStream
abstype nsIFileOutputStream
abstype nsIFileInputStream
abstype nsIBinaryOutpuStream
abstype nsIBinaryInputStream

type nsInputStream = #{
 available : #( -> Num),
 close : #( -> Undef),
 isNonBlocking : #( -> Bool),
}
type nsOutputStream = #{
 close : #( -> Undef),
 flush : #( -> Undef),
 isNonBlocking : #( -> Bool),
 write : #(Str, Num -> Undef)@unsafe,
 writeFrom : #(nsInputStream, Num -> Undef)@unsafe
}
type nsFileInputStream = #{
 __proto__ : nsInputStream,
 init : #(nsFile, Num, Num, Num -> Undef),
}
type nsFileOutputStream = #{
 __proto__ : nsOutputStream,
 init : #(nsFile, Num, Num, Num -> Undef),
}
type nsBinaryInputStream = #{
 __proto__ : nsInputStream,
 read8 : #( -> Num),
 read16 : #( -> Num),
 read32 : #( -> Num),
 read64 : #( -> Num),
 readBoolean : #( -> Bool),
 readByteArray : #(Num, Any -> Undef),
 readBytes : #(Num, Any -> Undef),
 readCString : #( -> Str),
 readDouble : #( -> Num),
 readFloat : #( -> Num),
 readString : #( -> Str),
 setInputStream : #(nsInputStream -> Undef)
}
type nsBinaryInputStream = #{
 __proto__ : nsOutputStream,
 setOutputStream : #(nsOutputStream -> Undef),
 write8 : #(Num -> Undef)@unsafe,
 write16 : #(Num -> Undef)@unsafe,
 write32 : #(Num -> Undef)@unsafe,
 write64 : #(Num -> Undef)@unsafe,
 writeBoolean : #(Bool -> Undef)@unsafe,
 writeByteArray : #(Any, Num -> Undef)@unsafe,
 writeDouble : #(Num -> Undef)@unsafe,
 writeFloat : #(Num -> Undef)@unsafe,
 writeStringZ : #(Str -> Undef)@unsafe,
 writeUtf8Z : #(Str -> Undef)@unsafe,
 writeWStringZ : #(Str -> Undef)@unsafe,
}


abstype nsIProperties
abstype nsIDirectoryService
abstype nsIDirectoryServiceProvider
abstype nsIDirectoryServiceProvider2
abstype nsIFile
abstype nsILocalFile

type SimpleEnumerator =
  typlambda a :: * . #{
    hasMoreElements : #( -> Bool),
    getNext : #( -> a)
  }


type nsFile = #{
  append : #(Str -> Undef)@unsafe,
  path : Str,
  QueryInterface : (nsIFile -> nsFile) &
                   (nsILocalFile -> nsLocalFile),
  directoryEntries : SimpleEnumerator<nsFile>,
  * : Extension
}

type nsLocalFile = #{
  __proto__ : nsFile,
  initWithPath : #(Str -> Undef),
  * : Extension
}

type nsDirectoryServiceProvier = #{
  getFile : #(Str, Extension -> nsFile),
  QueryInterface : #(nsIDirectoryServiceProvider -> nsDirectoryServiceProvider) &
                   #(nsIDirectoryServiceProvider2 -> nsDirectoryServiceProvider2)
}
type nsDirectoryServiceProvider2 = #{
  __proto__ : #nsDirectoryServiceProvider,
  getFiles : #(Str -> SimpleEnumerator<nsFile>)
}

type nsDirectoryServiceClass = #{
  getService: #(nsIProperties -> #{ 
    get: #(Str * nsIFile -> nsFile) & 
         #(Str * nsIID -> Object)
  }) & #(nsIDirectoryService -> nsDirectoryService)
}

type nsLocalFileClass = #{
  createInstance : #(nsILocalFile -> nsLocalFile)
}


-- DOM Storage: these are surfaced on the window object, not Components
type nsDOMStorage = {
 length : #Num,
 key : #(Num -> Str),
 getItem : #(Str -> (Str + Null)),
 setItem : #(Str, Any -> Undef)@unsafe,
 removeItem : #(Str -> Undef),
 clear : #( -> Undef),
 [0-9]+ : #Str, -- this is the index getter, and it is readonly
 * : Str@unsafe + #Str@safe -- this is the name getter/setter abilities, and setting is unsafe
}
type SessionStorage = {
 __proto__ : #nsDOMStorage,
 setItem : #(Str, Any -> Undef),
 * : Str
}
type LocalStorage = {
 __proto__ : #nsDOMStorage,
}
type Window = {
 sessionStorage : #SessionStorage,
 localStorage : #LocalStorage,
 globalStorage : #{
   * : LocalStorage
 }
}

abstype nsIDOMStorage
abstype nsIDOMStorageManager

type nsDOMStorageManager = {
 clearOfflineApps : #( -> Undef)@unsafe,
 getLocalStorageForPrincipal : #(Extension, Str -> LocalStorage),  -- should be nsPrincipal, but who cares?
 getUsage : #(Str -> Num)
}

type nsDOMStorageManagerClass = {
 getService : #(nsIDOMStorageManager -> nsDOMStorageManager)
}


-- Preferences
abstype nsIPrefService
abstype nsIPrefBranch
abstype nsIPrefBranch2
abstype nsISupportsString
abstype nsIPrefLocalizedString

type nsPrefLocalizedString = #{
  data : Str,
  toString : #( -> Str),
  setDataWithLength : #(Num, Str -> Undef),
}

type nsSupportsString = #{
  data : Str,
  toString : #( -> Str),
}

type nsPrefService = #{
 getBranch : #(Str -> nsPrefBranch),
 getDefaultBranch : #(Str -> nsPrefBranch),
 readUserPrefs : #((nsFile + Null) -> Undef),
 resetPrefs : #( -> Undef)@unsafe,
 resetUserPrefs : #( -> Undef)@unsafe,
 savePrefFile : #((nsFile + Null) -> Undef)@unsafe
}

type nsPrefBranch = #{
  root : #Str,
  PREF_INVALID : Num,
  PREF_STRING : Num,
  PREF_INT : Num,
  PREF_BOOL : Num,
  QueryInterface : #(nsIPrefBranch -> nsPrefBranch) &
                   #(nsIPrefBranch2 -> nsPrefBranch2),
  clearUserPref : #(Str -> Undef)@unsafe,
  deleteBranch : #(Str -> Undef)@unsafe,
  getBoolPref : #(Str -> Bool),
  getCharPref : #(Str -> Str),
  getChildList : #(Str, Extension -> Extension);
  getComplexValue(Str, in nsIIDRef aType, [iid_is(aType), retval] out nsQIResult aValue);
  getComplexValue : #(Str, nsILocalFile -> nsLocalFile) &
                    #(Str, nsISupportsString -> nsSupportsString) &
                    #(Str, nsIPrefLocalizedString -> nsPrefLocalizedString) &
                    #(Str, nsIRelativeFilePref -> nsRelativeFilePref),
  getIntPref : #(Str -> long),
  getPrefType : #(Str -> long),
  lockPref : #(Str -> Undef)@unsafe,
  prefHasUserValue : #(Str -> Bool),
  prefIsLocked : #(Str -> Bool),
  resetBranch : #(Str -> Undef)@unsafe,
  setBoolPref : #(Str -> Undef)@unsafe,
  setCharPref : #(Str -> Undef)@unsafe,
  setComplexValue : #(Str, nsILocalFile, nsLocalFile -> Undef) &
                    #(Str, nsISupportsString, nsSupportsString -> Undef) &
                    #(Str, nsIPrefLocalizedString, nsPrefLocalizedString -> Undef) &
                    #(Str, nsIRelativeFilePref, nsRelativeFilePref -> Undef)@unsafe,
  setIntPref : #(Str -> Undef)@unsafe,
  unlockPref : #(Str -> Undef)@unsafe,
}

type nsPrefBranch2 = #{
  __proto__ : #nsPrefBranch,
  addObserver : #(Str, #{ observe : #(nsPrefBranch2, Str, Str -> Undef) }, Bool -> Undef),
  removeObserver : #(#{ observe : #(nsPrefBranch2, Str, Str -> Undef) } -> Undef),
}

type nsRelativeFilePref = #{
  relativeToKey : Str,
  file : nsFile,
}

type nsRelativeFilePrefClass = #{
 createInstance : #(nsIRelativeFilePref -> nsRelativeFilePref)
}

type nsPrefServiceClass = #{
 getService : #(nsIPrefBranch -> nsPrefBranch) &
              #(nsIPrefService -> nsPrefService)
}


-- IOService
abstype nsIIOService
abstype nsIChannel
abstype nsIURI
abstype nsIStreamListener
abstype nsITransportSecurityInfo
abstype nsISSLStatusProvider
abstype nsIProtocolHandler

type nsChannel = #{
  asyncOpen :#(nsStreamListener, Any -> Undef),
  open : #( -> nsInputStream),
  contentCharset : Str,
  contentLength : Num,
  contentType : Str,
  notificationCallbacks : Any, -- nsIInterfaceRequestor
  originalURI : nsURI,
  owner : Any,
  securityInfo : #(nsTransportSecurityInfo + nsSSLStatusProvider + Null),
  URI : #nsURI
}

type nsProtocolHandler = #{
  allowPort : #(Num, Str -> Bool),
  newChannel : #(nsURI -> nsChannel),
  newURI : #(Str, Str, nsURI -> nsURI),
  defaultPort : #Num,
  protocolFlags : #Num,
  scheme : #Str,
}

type nsURI = #{
  clone : #( -> nsURI),
  cloneIgnoringRef : #( -> nsURI),
  equals : #(nsURI -> Bool),
  equalsExceptRef : #(nsURI -> Bool),
  resolve : #(Str -> Str),
  schemeIs : #(Str -> Bool)
  asciiHost : #Str,
  asciiSpec : #Str,
  host : Str,
  hostPort : Str,
  originCharset : #Str,
  password : Str,
  path : Str,
  port : Num,
  prePath : #Str,
  ref : Str,
  scheme : Str,
  spec : Str,
  username : Str,
  userPass : Str
}

type nsIOService = #{
  offline : Bool,
  allowPort : #(Num, Str -> Bool),
  extractScheme : #(Str -> Str),
  getProtocolFlags : #(Str -> Num),
  getProtocolHandler : #(Str -> nsProtocolHandler),
  newChannel : #(Str, Str, nsURI -> nsChannel),
  newChannelFromURI : #(nsURI -> nsChannel),
  newFileURI : #(nsFile -> nsURI),
  newURI : #(Str, Str, nsURI -> nsURI)
}

type nsIOServiceClass = #{
  getService : #(nsIIOService -> nsIOService),
}



-- The Components object, with classes and interfaces fields

type ComponentsType = #{ 
  classes : #{
    "@mozilla.org/file/directory_service;1": nsDirectoryServiceClass,
    "@mozilla.org/file/local;1": nsLocalFileClass,
    "@mozilla.org/dom/storagemanager;1" : nsDOMStorageManagerClass,
    "@mozilla.org/pref-relativefile;1" : nsRelativeFilePrefClass,
    "@mozilla.org/preferences-service;1" : nsPrefServiceClass,
    "@mozilla.org/network/io-service;1" : nsIOServiceClass,
    "@mozilla.org/network/file-output-stream;1" : nsFileOutputStreamClass
  },
  interfaces : #{
    nsIProperties : nsIProperties,
    nsIDirectoryService : nsIDirectoryService,
    nsIFile : nsIFile,
    nsILocalFile : nsILocalFile,
    nsIDOMStorage : nsIDOMStorage,
    nsIDOMStorageManager : nsIDOMStorageManager,
    nsIRelativeFilePref : nsIRelativeFilePref,
    nsIPrefService : nsIPrefService,
    nsIPrefBranch : nsIPrefBranch,
    nsIPrefBranch2 : nsIPrefBranch2,
    nsIPrefBranchInternal : nsIPrefBranch2 -- according to https://developer.mozilla.org/en/Code_snippets/Preferences#Resources, these are the same
    nsISupportsString : nsISupportsString,
    nsIPrefLocalizedString : nsIPrefLocalizedString,
    nsIOutputStream : nsIOutputStream,
    nsIInputStream : nsIInputStream,
    nsIFileOutputStream : nsIFileOutputStream,
    nsIFileInputStream : nsIFileInputStream,
    nsIBinaryOutputStream : nsIBinaryOutputStream,
    nsIBinaryInputStream : nsIBinaryInputStream,
    nsIURI : nsIURI,
    nsIIOService : nsIIOService,
    nsIChannel : nsIChannel,
    nsIURI : nsIURI,
    nsIStreamListener : nsIStreamListener,
    nsITransportSecurityInfo : nsITransportSecurityInfo,
    nsISSLStatusProvider : nsISSLStatusProvider,
    nsIProtocolHandler : nsIProtocolHandler,
    * : nsIID
  }
}

Components : ComponentsType

-- NetUtil
type NetUtil = #{
  -- need to worry about asyncCopy here
}

--FileUtils
type FileUtils = #{
 File : #(Str -> nsFile),
 getFile : #(Str, Extension, Bool -> nsFile)@unsafe, -- unsafe because it may create directories
 getDir : #(Str, Str, Bool, Bool -> nsFile)@unsafe, -- ditto
 openFileOutputStream : #(nsFile, Num -> nsFileOutputStream)@unsafe,
 openSafeFileOutputStream : #(nsFile, Num -> nsFileOutputStream)@unsafe,
 closeFileOutputStream : #(nsFileOutputStream -> Undef),
}
