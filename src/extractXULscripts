#!/usr/bin/perl

use XML::LibXML;
use Data::Dumper;
use File::Basename;
use strict;

my @scripts = ();
my %manifest = ();

sub walkDOM;
sub translateURL;
sub readFile;
sub parseManifest;

sub parseManifest {
  my ($file) = shift;
  open FH, $file or die "Can't read $file";
  my @manifest = <FH>;
  close FH;

  foreach my $entry (@manifest) {
    chomp $entry;
    my @parts = split " ", $entry;
    if ($#parts == 2) {
      $parts[2] =~ s/jar:(.*)\.jar!/\1.jar.unzipped/;
      if ($parts[0] eq "content") {
        $manifest{$parts[0]}{$parts[1]} = $parts[2];
      } elsif ($parts[0] eq "overlay") {
        push @{$manifest{$parts[0]}{$parts[1]}}, $parts[2];
      }
    } elsif ($#parts == 3) {
      if ($parts[0] eq "locale") {
        $parts[3] =~ s/jar:(.*)\.jar!/\1.jar.unzipped/;
        $manifest{$parts[0]}{$parts[1]}{$parts[2]} = $parts[3];
      } elsif ($parts[0] eq "overlay" && $parts[3] eq "application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}") {
        $parts[2] =~ s/jar:(.*)\.jar!/\1.jar.unzipped/;
        push @{$manifest{$parts[0]}{$parts[1]}}, $parts[2];
      }
    }
  }
}

sub translateURL {
  my ($url) = shift;
  if ($url =~ /chrome:\/\/([^\/]+)\/([^\/]+)\/(.*)/) {
    if ($2 eq "locale") {
      if (defined $manifest{$2}{$1}{'en-US'}) {
        $url = "$manifest{$2}{$1}{'en-US'}/$3";
      } elsif (defined $manifest{$2}{$1}{en}) {
        $url = "$manifest{$2}{$1}{en}/$3";
      }
    } else {
      $url = "$manifest{$2}{$1}/$3";
    }
  }
  return $url;
}

sub readFile ($$) {
    my ($file, $dir) = (translateURL(shift), shift);
    if (!-e $file) {
      $file = "$dir/$file";
    }
    open FH, $file or return $file;
    my @lines = <FH>;
    close FH;
    return (join "", @lines);
}

sub walkDOM ($$) {
    my ($elt, $sourceFile) = @_;
    my ($fname, $dir) = fileparse($sourceFile);
    if ($elt->nodeName =~ /script/i) {
        if ($elt->hasAttribute("src")) {
            push @scripts, readFile($elt->getAttribute("src"), $dir);
        } else {
            push @scripts, $elt->textContent;
        }
    } else {
        foreach my $attr ($elt->attributes()) {
            if ($attr and $attr->nodeName =~ /^on/) {
                push @scripts, ("function(event) { " . $attr->value . " }");
            }
        }
    }
    my $kid = $elt->firstChild;
    while ($kid) {
        walkDOM $kid, $sourceFile;
        $kid = $kid->nextSibling();
    }
}

my $manifestFile = shift;
my ($fname, $baseDir, $suffix) = fileparse($manifestFile);

parseManifest $manifestFile;

chdir $baseDir;

# print Dumper(\%manifest);

my @files = @ARGV;
foreach my $target (keys %{$manifest{overlay}}) {
    push @files, (@{$manifest{overlay}{$target}});
}

sub chromeURLMatch {
  my $uri = shift;
  return ($uri =~ /^chrome:/ ? 1 : 0);
}
sub chromeURLOpen {
  my $uri = shift;
  $uri = translateURL $uri;
  my $FH;
  open $FH, $uri;
  return $FH;
}

 # The returned $buffer will be parsed by the libxml2 parser
sub chromeURLRead {
  my $handler = shift;
  my $length = shift;
  my $buffer;
  read($handler, $buffer, $length);
  return $buffer; # $buffer will be an empty string '' if read() is done
}

# Close the handle associated with the resource.
sub chromeURLClose {
  my $handler = shift;
  close($handler);
}


foreach my $fileName (@files) {
  eval {
    # Register them with a instance of XML::LibXML::InputCallback
    my $input_callbacks = XML::LibXML::InputCallback->new();
    $input_callbacks->register_callbacks([ \&chromeURLMatch, \&chromeURLOpen,
                                           \&chromeURLRead, \&chromeURLClose ] );
    my $parser = XML::LibXML->new();
    $parser->input_callbacks($input_callbacks);
    my $dom = $parser->parse_file(translateURL($fileName));
    $dom->indexElements();
    walkDOM ($dom->documentElement(), translateURL($fileName));
  };
  if ($@) {
    print STDERR $@;
  }
}

print (join "\n", @scripts);
