[scriptable, uuid(00000000-0000-0000-c000-000000000046)]
interface nsISupports {
  void QueryInterface(in nsIIDRef uuid, [iid_is(uuid),retval] out nsQIResult result);
  [noscript, notxpcom] any AddRef();
  [noscript, notxpcom] any Release();
};

[scriptable, uuid(c8c0a080-0868-11d3-915f-d9d889d48e3c)]
interface nsIFile : nsISupports
{
    const unsigned long NORMAL_FILE_TYPE = 0;
    const unsigned long DIRECTORY_TYPE   = 1;

    void append(in Str node);
    [noscript] void appendNative(in Str node);

    void normalize();

    [unsafe] void create(in unsigned long type, in unsigned long permissions);

    attribute Str leafName;
    [noscript] attribute Str nativeLeafName;

    void copyTo(in nsIFile newParentDir, in Str newName);
    [noscript] void CopyToNative(in nsIFile newParentDir, in Str newName);

    void copyToFollowingLinks(in nsIFile newParentDir, in Str newName);
    [noscript] void copyToFollowingLinksNative(in nsIFile newParentDir, in Str newName);

    void moveTo(in nsIFile newParentDir, in Str newName);
    [noscript] void moveToNative(in nsIFile newParentDir, in Str newName);

    void remove(in boolean recursive);

    attribute unsigned long permissions;
    attribute unsigned long permissionsOfLink;

    attribute long long lastModifiedTime;
    attribute long long lastModifiedTimeOfLink;

    attribute long long fileSize;
    readonly attribute long long fileSizeOfLink;

    readonly attribute Str target;
    [noscript] readonly attribute Str nativeTarget;
    readonly attribute Str path;
    [noscript] readonly attribute Str nativePath;

    boolean exists();
    boolean isWritable();
    boolean isReadable();
    boolean isExecutable();
    boolean isHidden();
    boolean isDirectory();
    boolean isFile();
    boolean isSymlink();
    boolean isSpecial();

    [unsafe] void createUnique(in unsigned long type, in unsigned long permissions);
    nsIFile clone();

    boolean equals(in nsIFile inFile);

    boolean contains(in nsIFile inFile, in boolean recur);

    readonly attribute nsIFile parent;
};

[scriptable, uuid(4b731983-9542-49f4-b16b-de68ad1c2068)]
interface nsIPrivateBrowsingService : nsISupports
{
    [PrivateBrowsingCheck] attribute boolean privateBrowsingEnabled;

    readonly attribute boolean autoStarted;

    readonly attribute boolean lastChangedByCommandLine;

    void removeDataFromDomain(in Str aDomain);
};
[scriptable, uuid(baedc96a-9cee-4b6b-9160-90d257b3c8ef)]
interface nsIJSID : nsISupports
{
    readonly attribute Str  name;
    readonly attribute Str  number;
    readonly attribute boolean valid;

    boolean equals(in nsIJSID other);

    void initialize(in Str idString);

    Str toString();

    [notxpcom] const_nsID_ptr getID();
};
[scriptable, uuid(bf5eb086-9eaa-4694-aec3-fe4aac6119bd)]
interface nsIJSCID : nsIJSID
{
  [implicit_jscontext,optional_argc] jsval createInstance([optional] in jsval iid);
  [implicit_jscontext,optional_argc] jsval getService([optional] in jsval iid);
};

[scriptable, uuid(e76ec564-a080-4705-8609-384c755ec91e)]
interface nsIJSIID : nsIJSID
{
};


[scriptable, uuid(033A1470-8B2A-11d3-AF88-00A024FFC08C)]
interface nsIInterfaceRequestor : nsISupports
{
   /**
    * Retrieves the specified interface pointer.
    *
    * @param uuid The IID of the interface being requested.
    * @param result [out] The interface pointer to be filled in if
    *               the interface is accessible.
    * @return NS_OK - interface was successfully returned.
    *         NS_NOINTERFACE - interface not accessible.
    *         NS_ERROR* - method failure.
    */
	void getInterface(in nsIIDRef uuid, 
                      [iid_is(uuid),retval] out nsQIResult result);
};


[scriptable, uuid(e162bfa0-01bd-4e9f-9843-8fb2efcd6d1f)]
interface nsIPrefBranch : nsISupports
{

  const long PREF_INVALID = 0;
  const long PREF_STRING = 32;
  const long PREF_INT = 64;
  const long PREF_BOOL = 128;

  readonly attribute string root;

  long getPrefType(in string aPrefName);

  boolean getBoolPref(in string aPrefName);

  void setBoolPref(in string aPrefName, in boolean aValue);

  string getCharPref(in string aPrefName);

  void setCharPref(in string aPrefName, in string aValue);

  long getIntPref(in string aPrefName);

  void setIntPref(in string aPrefName, in long aValue);

  void getComplexValue(in string aPrefName, in nsIIDRef aType,
                       [iid_is(aType), retval] out nsQIResult aValue);

  void setComplexValue(in string aPrefName, in nsIIDRef aType, in nsISupports aValue);

  void clearUserPref(in string aPrefName);

  void lockPref(in string aPrefName);

  boolean prefIsLocked(in string aPrefName);

  void    unlockPref(in string aPrefName);


  void deleteBranch(in string aStartingAt);

  void getChildList(in string aStartingAt,
                    [optional] out unsigned long aCount,
                    [array, size_is(aCount), retval] out string aChildArray);

  void resetBranch(in string aStartingAt);

};

[scriptable, uuid(decb9cc7-c08f-4ea5-be91-a8fc637ce2d2)]
interface nsIPrefService : nsISupports
{
  void readUserPrefs(in nsIFile aFile);

  void resetPrefs();

  void resetUserPrefs();

  void savePrefFile(in nsIFile aFile);

  nsIPrefBranch getBranch(in string aPrefRoot);

  nsIPrefBranch getDefaultBranch(in string aPrefRoot);

};

[scriptable, uuid(114744d9-c369-456e-b55a-52fe52880d2d)]
interface nsIArray : nsISupports
{
    readonly attribute unsigned long length;

    void queryElementAt(in unsigned long index, in nsIIDRef uuid, [iid_is(uuid), retval] out nsQIResult result);
    
    unsigned long indexOf(in unsigned long startIndex, in nsISupports element);

    nsISimpleEnumerator enumerate();
};

interface nsISimpleEnumerator : nsISupports {
  boolean hasMoreElements();

  nsISupports getNext();
};

[scriptable, uuid(f0980f60-ee3d-11d4-998b-00b0d02354a0)]
interface nsIX509Cert : nsISupports {

  /**
   *  A nickname for the certificate.
   */
  readonly attribute string nickname;

  /**
   *  The primary email address of the certificate, if present.
   */
  readonly attribute string emailAddress;

  /**
   *  Obtain a list of all email addresses
   *  contained in the certificate.
   *
   *  @param length The number of strings in the returned array.
   *  @return An array of email addresses.
   */
  void getEmailAddresses(out unsigned long length, 
                         [retval, array, size_is(length)] out string addresses);

  /**
   *  Check whether a given address is contained in the certificate.
   *  The comparison will convert the email address to lowercase.
   *  The behaviour for non ASCII characters is undefined.
   *
   *  @param aEmailAddress The address to search for.
   *                
   *  @return True if the address is contained in the certificate.
   */
  boolean containsEmailAddress(in string aEmailAddress);

  /**
   *  The subject owning the certificate.
   */
  readonly attribute string subjectName;

  /**
   *  The subject's common name.
   */
  readonly attribute string commonName;

  /**
   *  The subject's organization.
   */
  readonly attribute string organization;

  /**
   *  The subject's organizational unit.
   */
  readonly attribute string organizationalUnit;

  /**
   *  The fingerprint of the certificate's public key,
   *  calculated using the SHA1 algorithm.
   */
  readonly attribute string sha1Fingerprint;

  /**
   *  The fingerprint of the certificate's public key,
   *  calculated using the MD5 algorithm.
   */
  readonly attribute string md5Fingerprint;

  /**
   *  A human readable name identifying the hardware or
   *  software token the certificate is stored on.
   */
  readonly attribute string tokenName;

  /**
   *  The subject identifying the issuer certificate.
   */
  readonly attribute string issuerName;

  /**
   *  The serial number the issuer assigned to this certificate.
   */
  readonly attribute string serialNumber;

  /**
   *  The issuer subject's common name.
   */
  readonly attribute string issuerCommonName;

  /**
   *  The issuer subject's organization.
   */
  readonly attribute string issuerOrganization;

  /**
   *  The issuer subject's organizational unit.
   */
  readonly attribute string issuerOrganizationUnit;

  /**
   *  The certificate used by the issuer to sign this certificate.
   */
  readonly attribute nsIX509Cert issuer;

  /**
   *  This certificate's validity period.
   */
  //readonly attribute nsIX509CertValidity validity;

  /**
   *  A unique identifier of this certificate within the local storage.
   */
  readonly attribute string dbKey;

  /**
   *  A human readable identifier to label this certificate.
   */
  readonly attribute string windowTitle;

  /**
   *  Constants to classify the type of a certificate.
   */
  const unsigned long UNKNOWN_CERT =      0;
  const unsigned long CA_CERT      = 1 << 0;
  const unsigned long USER_CERT    = 1 << 1;
  const unsigned long EMAIL_CERT   = 1 << 2;
  const unsigned long SERVER_CERT  = 1 << 3;
  const unsigned long VERIFIED_OK          =      0;
  const unsigned long NOT_VERIFIED_UNKNOWN = 1 << 0;
  const unsigned long CERT_REVOKED         = 1 << 1;
  const unsigned long CERT_EXPIRED         = 1 << 2;
  const unsigned long CERT_NOT_TRUSTED     = 1 << 3;
  const unsigned long ISSUER_NOT_TRUSTED   = 1 << 4;
  const unsigned long ISSUER_UNKNOWN       = 1 << 5;
  const unsigned long INVALID_CA           = 1 << 6;
  const unsigned long USAGE_NOT_ALLOWED    = 1 << 7;
  
  const unsigned long CERT_USAGE_SSLClient = 0;
  const unsigned long CERT_USAGE_SSLServer = 1;
  const unsigned long CERT_USAGE_SSLServerWithStepUp = 2;
  const unsigned long CERT_USAGE_SSLCA = 3;
  const unsigned long CERT_USAGE_EmailSigner = 4;
  const unsigned long CERT_USAGE_EmailRecipient = 5;
  const unsigned long CERT_USAGE_ObjectSigner = 6;
  const unsigned long CERT_USAGE_UserCertImport = 7;
  const unsigned long CERT_USAGE_VerifyCA = 8;
  const unsigned long CERT_USAGE_ProtectedObjectSigner = 9;
  const unsigned long CERT_USAGE_StatusResponder = 10;
  const unsigned long CERT_USAGE_AnyCA = 11;
  nsIArray getChain();

  void getUsagesArray(in boolean localOnly,
                      out unsigned long verified,
                      out unsigned long count, 
                      [array, size_is(count)] out string usages);

  void getUsagesString(in boolean localOnly, out unsigned long verified, out string usages);

  unsigned long verifyForUsage(in unsigned long usage);

  //readonly attribute nsIASN1Object ASN1Structure;

  void getRawDER(out unsigned long length, [retval, array, size_is(length)] out octet data);

  boolean equals(in nsIX509Cert other);
};
