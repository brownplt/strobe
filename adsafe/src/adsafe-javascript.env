// NOTE: This file should _only_ contain class definitions. The fields of
// HTMLWindow (the global object's type) are automatically added to the
// initial environment.

// The type of comparisons may seem unnecessarily restrictive. However, these
// types ensure that .toStr() and .valueOf() are not called.
operator "<" : 'Ad * 'Ad -> Bool
operator "<=" : 'Ad * 'Ad -> Bool
operator ">" : 'Ad * 'Ad -> Bool
operator ">=" : 'Ad * 'Ad -> Bool
operator "==" : 'Ad * 'Ad -> Bool
operator "!=" : 'Ad * 'Ad -> Bool

// TODO: verify these are safe, like other comparisons
operator "&&" : forall a . forall b . 'a * 'b -> Bool + 'b
operator "||" : forall a . forall b . 'a * 'b -> 'a + 'b

// int args, num result
operator "*" : forall a <: 'Ad . 'a * 'a -> 'a
operator "/" : 'Ad * 'Ad -> 'Ad
operator "%" : forall a <: 'Ad . 'a * 'a -> 'a 
operator "-" : forall a <: 'Ad . 'a * 'a -> 'a
operator "<<" : 'Ad * 'Ad -> 'Ad
operator ">>" : 'Ad * 'Ad -> 'Ad
operator ">>>" : 'Ad * 'Ad -> 'Ad
operator "&" : 'Ad * 'Ad -> 'Ad
operator "^" : 'Ad * 'Ad -> 'Ad
operator "|" : 'Ad * 'Ad -> 'Ad
// type-system win
operator "+" : forall a <: 'Ad . 'a * 'a -> 'a
operator "in" : 'Ad * 'Ad -> Bool
operator "===" : forall a . 'a * 'a -> Bool
operator "!==" : forall a . 'a * 'a -> Bool

operator "prefix:!" : Any -> Bool
operator "prefix:~" : Num -> Int
operator "prefix:+" : forall a <: Num . 'a -> 'a
operator "prefix:-" : forall a <: Num . 'a -> 'a
operator "prefix:typeof" : forall a . 'a -> Str
operator "prefix:void" : forall a . 'a -> Undef

class Object {
  toString: -> Str,
  hasOwnProperty: Str -> Bool,
}
class RegExp prototype Object {
  test : Str -> Bool,
  exec : Str -> Array<Str + Undef> + Undef,
}

class Num prototype Object {
}

Object : {}

class Function prototype Object {}

Number : Any -> Num

class Null {}

class Str prototype Object {
  charCodeAt : Int -> Int,
  lastIndexOf : Str * Int + Undef -> Int,
  substring : Int * Int + Undef -> Str,
  substr : Int * Int -> Str, //yes there is 2 of them
  length : Int,
  charAt : Int -> Str,
  toLowerCase : -> Str,
  toUpperCase : -> Str,
  split : Str -> Array<Str>,
  indexOf : Str -> Int,
  slice : Int * Int + Undef -> Str,
}

String : {fromCharCode : Int -> Str,
          #proto: Object,
          *: Undef,
          #code: Any -> Str}

Str_fromCharCode : Int -> Str

class Int prototype Num {
  toStr : -> Str
}

class Array prototype Object {
  //TODO: put in .length, .concat, etc., here
}

class Undef {
}

class Bool prototype Object { }

class Date prototype Object {
  getDate : -> Int,
  getDay : -> Int,
  getFullYear : -> Int,
  getHours : -> Int,
  getMilliseconds : -> Int,
  getMinutes : -> Int,
  getMonth : -> Int,
  getSeconds : -> Int,
  getTime : -> Int,
  getTimezoneOffset : -> Int,
  getUTCDate : -> Int,
  getUTCDay : -> Int,
  getUTCFullYear : -> Int,
  getUTCHours : -> Int,
  getUTCMilliseconds : -> Int,
  getUTCMinutes : -> Int,
  getUTCMonth : -> Int,
  getUTCSeconds : -> Int,
  getYear : -> Int,

  parse : Str -> Int,

  setDate : Int -> Int,
  setFullYear : Int * Int + Undef * Int + Undef -> Int,
  setHours : Int * Int + Undef * Int + Undef * Int + Undef -> Int,
  setMilliseconds : Int -> Int,
  setMinutes : Int * Int + Undef * Int + Undef -> Int,
  setMonth : Int * Int + Undef -> Int,
  setSeconds : Int * Int + Undef -> Int,
  setTime : Int -> Int,
  setUTCDate : Int -> Int,
  setUTCFullYear : Int * Int + Undef * Int + Undef -> Int,
  setUTCHours : Int * Int + Undef * Int + Undef * Int + Undef -> Int,
  setUTCMilliseconds : Int -> Int,
  setUTCMinutes : Int * Int + Undef * Int + Undef -> Int,
  setUTCMonth : Int * Int + Undef -> Int,
  setUTCSeconds : Int * Int + Undef -> Int,
  setYear : Int -> Int,

  toDateStr : -> Str,
  toGMTStr : -> Str,
  toLocaleDateStr : -> Str,
  toLocaleStr : -> Str,
  toLocaleTimeStr : -> Str,
  toStr : -> Str,
  toTimeStr : -> Str,
  toUTCStr : -> Str,

  valueOf : -> Int,
}

class Global { 
  encodeURI : Str -> Str, 
  parseInt : Str + Num * Int + Undef -> Int,
  parseFloat : Str + Num -> Num,
  undefined: Undef,
  Date : Str + Date + Undef -> Date,
  Math: {
    E : Num,
    LN10 : Num,
    LN2 : Num,
    LOG2E : Num,
    LOG10E : Num,
    PI : Num,
    SQRT1_2 : Num,
    SQRT2 : Num,
    abs : forall a <: Num . 'a -> 'a,
    acos : Num -> Num,
    asin : Num -> Num,
    atan : Num -> Num,
    atan2 : Num -> Num,
    ceil : Num -> Int,
    cos : Num -> Num,
    exp : Num -> Num,
    floor : Num -> Int,
    log : Num -> Num,
    max : forall a <: Num . 'a * 'a -> 'a,
    min : forall a <: Num . 'a * 'a -> 'a,
     // See page 128 of ECMA262-3 .pdf. What is going on with Math.pow?!
    pow : forall a <: Num . 'a * 'a -> 'a,
    random : -> Num,
    // round(NaN) === NaN ...
    round : Num -> Num,
    sin : Num -> Num,
    sqrt : Num -> Num,
    tan : Num -> Num
  }
}


