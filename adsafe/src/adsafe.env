// The identifier Ad holds a recursive type representing values that
// can safely flow into ad programs.  It is useful to think of it as
// the kinds of values that a program that passes JSlint with the 
// ADsafe option on can create, along with the objects that ADsafe
// produces itself.

// The type BAD represents values that are never used by the program.
// The annotation const indicates that a field cannot be changed

type Ad = trec t . 
    Undef 
  + Null
  + Num 
  + Int
  + Str 
  + Bool 
  + { "prototype" : {
        hasOwnProperty : {call: Any * Str -> Bool},
        toString : {apply: Any -> Str}
      },
      ___nodes___ : Array<HTMLElement + Undef> + Undef,
      ___star___ : Bool + Undef,
      __proto__ : BAD,
      __parent__ : BAD,
      valueOf : _,
      hasOwnProperty : _,
      toString : _,
      arguments : _,
      "constructor" : _,
      #proto : Object+Function+Array+Bunch_proto,
      * : 't,
      #code : ['t + HTMLWindow] 't ... -> 't
     }

// This is here purely for convenience --- note that it refers to 'Ad
// for its recursive reference, not 'AdObj.  This shows up in obj* casts
type AdObj = 
    { "prototype" : {
        hasOwnProperty : {call: Any * Str -> Bool},
        toString : {apply: Any -> Str}
      },
      ___nodes___ : Array<HTMLElement + Undef> + Undef,
      ___star___ : Bool + Undef,
      __proto__ : BAD,
      __parent__ : BAD,
      valueOf : _,
      hasOwnProperty : _,
      toString : _,
      arguments : _,
      "constructor" : _,
      #proto : Object+Function+Array+Bunch_proto,
      * : 'Ad,
      #code : ['Ad + HTMLWindow] 'Ad ... -> 'Ad
     }
      
document : HTMLDocument

type Selector = 
    { op: Str + Undef, 
      name: Str + Undef, 
      value: Str + Undef, 
      #proto: Object, 
      *: Bot, 
      #code: Bot }

type Handler = 
    { #proto: Object,
      *:      Array<['Ad + HTMLWindow] 'Ad ... -> 'Ad> + Undef,
      #code:  Bot }

type not_banned = 
     $^{"arguments", "caller", "callee", "constructor", "eval", "stack",
        "watch", "unwatch", "valueOf", "toString", "hasOwnProperty",
        "prototype", "___nodes___", "___star___", "__proto__", "__parent__"}

type banned =
     ${"arguments", "caller", "callee", "constructor", "eval", "stack",
       "watch", "unwatch", "valueOf", "toString", "hasOwnProperty",
       "prototype", "___nodes___", "___star___", "__proto__", "__parent__"} +
     Num + Bool + Null + Undef + 'AdObj

reject_name : (('banned -> True) + ('not_banned -> Bool))

type Pecker =
     {".":   HTMLElement + Undef -> Bool ,
      "&":   HTMLElement + Undef -> Bool ,
      "_":   HTMLElement + Undef -> Bool ,
      "[":   HTMLElement + Undef -> Bool ,
      "[=":  HTMLElement + Undef -> Bool ,
      "[!=": HTMLElement + Undef -> Bool ,
      "[^=": HTMLElement + Undef -> Bool ,
      "[$=": HTMLElement + Undef -> Bool ,
      "[*=": HTMLElement + Undef -> Bool ,
      "[~=": HTMLElement + Undef -> Bool ,
      "[|=": HTMLElement + Undef -> Bool ,
      ":blur": HTMLElement + Undef -> Bool ,
      ":checked": HTMLElement + Undef -> Bool ,
      ":disabled": HTMLElement + Undef -> Bool ,
      ":enabled": HTMLElement + Undef -> Bool ,
      ":even": HTMLElement + Undef -> Bool ,
      ":focus": HTMLElement + Undef -> Bool ,
      ":hidden": HTMLElement + Undef -> Bool ,
      ":odd": HTMLElement + Undef -> Bool ,
      ":tag": HTMLElement + Undef -> Str ,
      ":text": HTMLElement + Undef -> Bool ,
      ":trim": HTMLElement + Undef -> Bool ,
      ":unchecked": HTMLElement + Undef -> Bool ,
      ":visible": HTMLElement + Undef -> Bool ,
      #proto: Object, *: _, #code: _}


// The notation ${string,...} indicates a set of primitive strings.
// The notation $^{string,...} indicates a set of all strings minus those listed
// A union of ${s1, ...} + ${s2, ...} is equivalent to ${s1,...,s2,...}
// The type of document.createElement is ($^{"script"} -> HTMLElement)
// Doing a dictionary lookup on an object of type Makeable will return strings
// that are provably not "script", so we use this pattern.
type Makeable =
                 {a         : ${"a"},
                  abbr      : ${"abbr"},
                  acronym   : ${"acronym"},
                  address   : ${"address"},
                  area      : ${"area"},
                  b         : ${"b"},
                  bdo       : ${"bdo"},
                  big       : ${"big"},
                  blockquote: ${"blockquote"},
                  br        : ${"br"},
                  button    : ${"button"},
                  canvas    : ${"canvas"},
                  caption   : ${"caption"},
                  center    : ${"center"},
                  cite      : ${"cite"},
                  code      : ${"code"},
                  col       : ${"col"},
                  colgroup  : ${"colgroup"},
                  dd        : ${"dd"},
                  del       : ${"del"},
                  dfn       : ${"dfn"},
                  dir       : ${"dir"},
                  div       : ${"div"},
                  dl        : ${"dl"},
                  dt        : ${"dt"},
                  em        : ${"em"},
                  fieldset  : ${"fieldset"},
                  font      : ${"font"},
                  form      : ${"form"},
                  h1        : ${"h1"},
                  h2        : ${"h2"},
                  h3        : ${"h3"},
                  h4        : ${"h4"},
                  h5        : ${"h5"},
                  h6        : ${"h6"},
                  hr        : ${"hr"},
                  i         : ${"i"},
                  img       : ${"img"},
                  input     : ${"input"},
                  ins       : ${"ins"},
                  kbd       : ${"kbd"},
                  label     : ${"label"},
                  legend    : ${"legend"},
                  li        : ${"li"},
                  map       : ${"map"},
                  menu      : ${"menu"},
                  object    : ${"object"},
                  ol        : ${"ol"},
                  optgroup  : ${"optgroup"},
                  option    : ${"option"},
                  p         : ${"p"},
                  pre       : ${"pre"},
                  q         : ${"q"},
                  samp      : ${"samp"},
                  select    : ${"select"},
                  small     : ${"small"},
                  span      : ${"span"},
                  strong    : ${"strong"},
                  sub       : ${"sub"},
                  sup       : ${"sup"},
                  table     : ${"table"},
                  tbody     : ${"tbody"},
                  td        : ${"td"},
                  textarea  : ${"textarea"},
                  tfoot     : ${"tfoot"},
                  th        : ${"th"},
                  thead     : ${"thead"},
                  tr        : ${"tr"},
                  tt        : ${"tt"},
                  u         : ${"u"},
                  ul        : ${"ul"},
                  "var"     : ${"var"},
                  #proto    : Object,
                  *         : Bot,
                  #code     : Bot
              }

type ADSAFE =
        { set:    'Ad * 'Ad * 'Ad -> 'Ad,
          get:    'Ad * 'Ad * -> 'Ad,
          log:    'Ad -> Undef,
          lib:    'Ad * 'Ad -> 'Ad,
          later:  'Ad * 'Ad -> 'Ad,
          id:     Str -> Undef,
          go:     Str * 'Ad -> Undef,
          create: 'Ad,
          isArray: Undef + (Any -> Bool),
        }

ADSAFE : 'ADSAFE

type BadArray = ${"concat", "every", "filter", "forEach", "map", "reduce", "reduceRight", "reverse", "slice", "some", "sort"}

type Mozilla = trec f . ${"concat", "every", "filter", "forEach", "map", "reduce", "reduceRight", "reverse", "slice", "some", "sort"} -> 'f