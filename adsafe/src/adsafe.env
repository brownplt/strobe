type Ad = trec t . 
    Undef 
  + Null
  + Num 
  + Str 
  + Bool 
  + { arguments : Any,
      caller : Any,
      callee : Any,
      "constructor" : Any,
      eval : Any,
      stack : Any,
      unwatch : Any,
      valueOf : Any,
      watch : Any,
      "prototype" : Any,
      ___nodes___ : Array<HTMLElement + Undef> + Undef,
      ___star___ : Bool + Undef,
      __proto__ : Any,
      #proto : Object+Function+Array,
      * : 't,
      #code : ['t + HTMLWindow] 't ... -> 't
     }

type AdObj = 
    { arguments : Any,
      caller : Any,
      callee : Any,
      "constructor" : Any,
      eval : Any,
      stack : Any,
      unwatch : Any,
      valueOf : Any,
      watch : Any,
      "prototype" : Any,
      ___nodes___ : Array<HTMLElement + Undef> + Undef,
      ___star___ : Bool + Undef,
      __proto__ : Any,
      #proto : Object+Function+Array,
      * : 'Ad,
      #code : ['Ad + HTMLWindow] 'Ad ... -> 'Ad
     }
      
class ASNode prototype HTMLElement {
  value : 'Ad,
}

document : HTMLDocument

type Selector = 
    { op: Str + Undef, 
      name: Str + Undef, 
      value: Str + Undef, 
      #proto: Object, 
      *: Undef, 
      #code: Bot }

type not_banned = 
     $^{"arguments", "caller", "callee", "constructor", "eval", "stack",
        "watch", "unwatch", "valueOf", "toString", "hasOwnProperty",
        "prototype", "___nodes___", "___star___", "__proto__", "__parent__"}

type banned = 
     ${"arguments", "caller", "callee", "constructor", "eval", "stack",
       "watch", "unwatch", "valueOf", "toString", "hasOwnProperty",
       "prototype", "___nodes___", "___star___", "__proto__", "__parent__"}


reject_name : (('banned -> True) + ('not_banned -> False))
