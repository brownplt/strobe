// HTMLWindow is the type of the global object. All its fields are added to the
// initial environment.
class HTMLWindow prototype Global {
  eval : BAD,
  document : HTMLDocument,
  // This has to take a function type (for ad-types)
  setTimeout : Native + (([HTMLWindow + 'Ad] 'Ad ... -> 'Ad) * 'Ad ->
Int), 
  // This is even more restrictive since we never actually use it
  setInterval : Native + (((-> Undef) + (Int -> Undef)) * Int -> Int),
  clearInterval : Native + (Int -> Undef),
  clearTimeout : Native + (Int -> Undef),
  window : HTMLWindow,
  event : Event,
  console : {
    log : Native + (Str -> Undef), 
  },
  innerWidth : Int,
  innerHeight : Int,
  getComputedStyle : Native + (HTMLElement + Undef * Str -> 'Style)
}

Debug : {
  writeln : Native + (Str -> Undef)
}

opera : {
  postError : Str -> Undef
}

class TextRectangle {
  left : Num,
  top : Num,
  right : Num,
  bottom : Num,
  width : Num,
  height : Num
}

type ad_alias = trec t . 
    Undef 
  + Null
  + Int
  + Num 
  + Str 
  + Bool 
  + { "prototype" : BAD,
      ___nodes___ : Array<HTMLElement + Undef> + Undef,
      ___star___ : Bool + Undef,
      __proto__ : BAD,
      __parent__ : BAD,
      valueOf : _,
      hasOwnProperty : _,
      toString : _,
      arguments : BAD,
      "constructor" : BAD,
      watch : BAD,
      unwatch : BAD,
      #proto : Object+Function+Array+Bunch_proto+Str_proto+Num+Bool+RegExp,
      * : 't,
      #code : ['t + HTMLWindow] 't ... -> 't
     }

type Style = {
  #proto : Object, 
  * : 'ad_alias,
  #code : Bot
}

class Node {
  appendChild : Node -> Node,
}

class checked HTMLElement prototype Node {
  onfocusin : Native + (Event -> Undef),
  onfocusout : Native + (Event -> Undef),
  onmouseover : Native + (Event -> Undef),
  onmouseout : Native + (Event -> Undef),
  onmouseup: Native + (Event -> Undef),
  onmousedown : Native + (Event -> Undef),
  onclick: Native + (Event -> Undef),
  ondblclick: Native + (Event -> Undef),
  onkeypress: Native + (Event -> Undef),
  "___adsafe root___" : Str,
  addEventListener : Str * (Event -> Undef) * Bool -> Undef,
  onchange : Native + (Event -> Undef),
  getBoundingClientRect : Native + (-> TextRectangle),
  onmousemove : Native + (Event -> Undef),
  style : 'Style,
  className : Str,
  name : Str + Undef,
  nodeName : Str + Undef,
  getElementsByTagName : Native + (Str + Undef -> Array<HTMLElement>), // close enough
  tagName : Str,
  firstChild : HTMLElement + Undef,
  nextSibling : HTMLElement + Undef,
  childNodes : Array<HTMLElement>,
  nodeValue : Str,
  removeChild : Native + (HTMLElement + Undef -> Undef),
  appendChild : Native + (HTMLElement + Undef -> Undef),
  title : Str + Undef,
  "checked" : Bool,
  cloneNode : Native + (Bool -> HTMLElement),
  currentStyle : Undef + 'Style,
  "type" : Str,
  parentNode : HTMLElement,
  parent : HTMLElement,
  value : Str + Undef,
  blur : Native + (-> Undef),
  disabled : Bool,
  focus: Native + (-> Undef + HTMLElement),
  offsetHeight : Int,
  offsetWidth : Int,
  selectionStart : Int,
  selectionEnd : Int,
  createTextRange : Native + (-> Range),
  autocomplete : Str,
  replaceNode : Native + (HTMLElement + Undef -> Undef),
  clone : Native + (Bool -> HTMLElement),
  insertBefore : Native + (HTMLElement + Undef * HTMLElement + Undef ->
Undef),
  select : Native + (-> Undef),
  removeElement : Native + (HTMLElement + Undef -> Undef),
  ownerDocument : HTMLDocument,
  change : Native + Undef + (Event -> Undef),
  "___ on ___" : {#proto: Object, *: Array<['ad_alias + HTMLWindow] 'ad_alias ... -> 'ad_alias> + Undef, #code: Bot} + Undef,
  "_adsafe mark_" : Str + Undef
}

class checked HTMLInputElement prototype HTMLElement {
  "type" : Str,
  value : Str,
  focus : -> Undef,
}

class checked HTMLDivElement prototype HTMLElement {

}

class checked HTMLDocument {
  getElementById : Native + (Str + Undef -> Null + HTMLElement),
  onclick : Native + (Event -> Undef),
  onmousemove : Native + (Event -> Undef),
  write : BAD,
  writeln: BAD,
  createElement : Native + ($^{"script"} -> HTMLElement),
  createTextNode : Native + (Str -> HTMLElement),
  addEventListener : Native + (Str * (Event -> Undef) * Bool -> Undef),
  selection : Selection,
  defaultView : HTMLWindow,
  createDocumentFragment : Native + (-> HTMLElement),
}

class Selection prototype Object {
  createRange : Native + (-> Range),
}

class Range prototype Object {
  expand : Native + (Str -> Undef),
  inRange : Native + (Undef + Range -> Bool),
  text : Str,
  select : Native + (-> Undef),
}

class checked HTMLImageElement prototype HTMLElement {
  alt : Str,
  src : Str,
  useMap : Str,
  isMap : Bool,
  width : Int,
  height : Int,
  naturalWidth : Int,
  naturalHeight : Int,
  complete : Bool,

  onload : Native + (Event -> Undef),
}

class checked HTMLLabel {
  innerHTML : Str
}

class checked Event {
  pageX : Int,
  pageY : Int,
  clientX : Int,
  clientY : Int,
  preventDefault : Native + (-> Undef),
  touches : Array<Event>,
  charCode : Int,
  keyCode : Int,
  "type" : Str,
  target : HTMLElement + Undef,
  srcElement : HTMLElement + Undef,
  cancelBubble : Bool,
  stopPropagation : Native + (-> Undef),
  returnValue : Bool,
  altKey : Bool,
  ctrlKey : Bool,
  shiftKey : Bool,
  key : Str,
}

//canvas!
class checked HTMLCanvasElement prototype HTMLElement {
  width : Int,
  height : Int,
  getContext : Native + (Str -> CanvasRenderingContext2D),
  toDataURL : Native + (Str + Undef -> Str),
}

class CanvasGradient { // *not* checkable
  addColorStop : Native + (Num * Str -> Undef)
}

class CanvasPattern { // *not* checkable
}

class checked ImageData {
  width : Int,
  height : Int,
  data : Array<Int> //really a CanvasPixelArray, but acts like this.
                    //also should really be Byte, not Int.
}

