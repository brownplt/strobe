let (Point = ref 
    { dist : func(self) /*: 'Point_dist */ {
	    prim("+", !self["x"], !self["y"])
	},
      __proto__ : null })

    letrec (pt1 /*: {x : Num, y : Num, dist : _,
                     "__class__" : {dist : 'Point_dist, "__proto__": Null, *: _}, 
		     "__proto__" : {dist : [] -> Num, "__proto__": Null, *: _} } */ = 
	    ref 
	    (upcast /*: {{x : Num, y : Num, dist : _,
                     "__class__" : {dist : 'Point_dist, "__proto__": Null, *: _}, 
		     "__proto__" : {dist : [] -> Num, "__proto__": Null, *: _} }} */
	     {x : 2.3, y : 9.7, __class__ : Point, __proto__ :
		 ref
		 { dist : func() /*: [] -> Num */ {
			 !(!pt1["__class__"])["dist"](pt1)
		     },
		   __proto__ : null}}))

    let (ColorPoint = ref
	{ __proto__ : Point,
	  setColor : func(self, color) /*: 'ColorPoint_setColor */ {
		self := !self["color" = color]; undefined
	    } })
    letrec (pt2 /*: ref 'cpt */ =
	    ref
	    (upcast /*: 'cpt */
	     {x : 2.3, y : 9.7, color : "blue",
	      "__class__" : ColorPoint,
	      "__proto__": 
	      ref
	      { setColor : func(color) /*: [Str] -> Undef */ {
		      !(!pt2["__class__"])["setColor"](pt2, color)
		  },
		"__proto__":
		ref 
		{ dist: func() /*: [] -> Num */ {
			!(!pt2["__class__"])["dist"](pt2)
		    },
		  "__proto__" : null
		}}}))
    !pt2["setColor"]("purplish");
!pt2["dist"]();
let (distCaller = func(anyPt) /*: forall o <: {{ dist : ^([] -> Num) }} . [ref 'o] -> Num */ {
	!anyPt["dist"]()
    })
    distCaller(pt2);
distCaller(pt1)

